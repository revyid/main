// path = ./app/admin/page.tsx

// app/admin/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'
import { Switch } from '@/components/ui/switch'
import { toast } from 'sonner'
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table'
import { Badge } from '@/components/ui/badge'
import { format } from 'date-fns'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'

interface User {
  id: string
  email: string
  firstName: string | null
  lastName: string | null
  publicMetadata: {
    isBanned?: boolean
    banReason?: string
    banExpiresAt?: string
    banType?: 'permanent' | 'temporary'
  }
}

interface AppSettings {
  registrationEnabled: boolean
  maintenanceMode: boolean
  apiRateLimit: number
  passwordPolicy: 'low' | 'medium' | 'high'
  require2FA: boolean
  activityLogging: boolean
}

export default function AdminPage() {
  const router = useRouter()
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  // Admin data states
  const [users, setUsers] = useState<User[]>([])
  const [loadingUsers, setLoadingUsers] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedUser, setSelectedUser] = useState<User | null>(null)
  
  // Settings states
  const [settings, setSettings] = useState<AppSettings>({
    registrationEnabled: true,
    maintenanceMode: false,
    apiRateLimit: 100,
    passwordPolicy: 'medium',
    require2FA: true,
    activityLogging: true,
  })

  // Modal states
  const [banModalOpen, setBanModalOpen] = useState(false)
  const [unbanModalOpen, setUnbanModalOpen] = useState(false)
  const [banType, setBanType] = useState<'permanent' | 'temporary'>('permanent')
  const [banReason, setBanReason] = useState('')
  const [banDuration, setBanDuration] = useState(60) // minutes

  // Handle login
  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    if (email === process.env.NEXT_PUBLIC_ADMIN_EMAIL && password === process.env.NEXT_PUBLIC_ADMIN_PASSWORD) {
      document.cookie = `admin-token=${process.env.NEXT_PUBLIC_ADMIN_TOKEN_SECRET}; path=/; max-age=86400` // 1 day
      setIsLoggedIn(true)
      fetchUsers()
      fetchSettings()
    } else {
      setError('Invalid credentials')
    }
    
    setIsLoading(false)
  }

  // Check if already logged in
  useEffect(() => {
    const token = document.cookie.split('; ').find(row => row.startsWith('admin-token='))?.split('=')[1]
    if (token === process.env.NEXT_PUBLIC_ADMIN_TOKEN_SECRET) {
      setIsLoggedIn(true)
      fetchUsers()
      fetchSettings()
    }
  }, [])

  // Fetch users from Clerk
  const fetchUsers = async () => {
    try {
      setLoadingUsers(true)
      const response = await fetch('/api/admin/users')
      const data = await response.json()
      setUsers(data.users)
    } catch (error) {
      console.error('Failed to fetch users:', error)
      toast.error('Failed to fetch users')
    } finally {
      setLoadingUsers(false)
    }
  }

  // Fetch settings
  const fetchSettings = async () => {
    try {
      const response = await fetch('/api/admin/settings')
      const data = await response.json()
      setSettings(data.settings)
    } catch (error) {
      console.error('Failed to fetch settings:', error)
    }
  }

  // Save settings
  const saveSettings = async () => {
    try {
      const response = await fetch('/api/admin/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(settings),
      })

      if (response.ok) {
        toast.success('Settings saved successfully')
      } else {
        throw new Error('Failed to save settings')
      }
    } catch (error) {
      console.error('Error saving settings:', error)
      toast.error('Failed to save settings')
    }
  }

  // Ban user
  const handleBanUser = async () => {
    if (!selectedUser) return
    
    try {
      const response = await fetch('/api/admin/ban', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: selectedUser.id,
          type: banType,
          reason: banReason,
          duration: banType === 'temporary' ? banDuration : undefined,
        }),
      })

      if (response.ok) {
        toast.success('User banned successfully')
        setBanModalOpen(false)
        fetchUsers() // Refresh user list
      } else {
        throw new Error('Failed to ban user')
      }
    } catch (error) {
      console.error('Error banning user:', error)
      toast.error('Failed to ban user')
    }
  }

  // Unban user
  const handleUnbanUser = async () => {
    if (!selectedUser) return
    
    try {
      const response = await fetch('/api/admin/unban', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: selectedUser.id,
        }),
      })

      if (response.ok) {
        toast.success('User unbanned successfully')
        setUnbanModalOpen(false)
        fetchUsers() // Refresh user list
      } else {
        throw new Error('Failed to unban user')
      }
    } catch (error) {
      console.error('Error unbanning user:', error)
      toast.error('Failed to unban user')
    }
  }

  // Filter users based on search term
  const filteredUsers = users.filter(user =>
    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (user.firstName && user.firstName.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (user.lastName && user.lastName.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl">Admin Login</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleLogin} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
              {error && <p className="text-red-500 text-sm">{error}</p>}
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? 'Logging in...' : 'Login'}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8 flex justify-between items-center">
          <h1 className="text-xl font-bold text-gray-900">Admin Dashboard</h1>
          <Button
            variant="outline"
            onClick={() => {
              document.cookie = 'admin-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'
              setIsLoggedIn(false)
              router.push('/admin')
            }}
          >
            Logout
          </Button>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Users Section */}
          <div className="lg:col-span-3 space-y-6">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle>User Management</CardTitle>
                  <div className="relative w-64">
                    <Input
                      type="text"
                      placeholder="Search users..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-8"
                    />
                    <svg
                      className="absolute left-3 top-2.5 h-4 w-4 text-gray-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {loadingUsers ? (
                  <div className="flex justify-center items-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900" />
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Name</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredUsers.map((user) => (
                        <TableRow key={user.id}>
                          <TableCell>
                            {user.firstName} {user.lastName}
                          </TableCell>
                          <TableCell>{user.email}</TableCell>
                          <TableCell>
                            <Badge
                              variant={user.publicMetadata.isBanned ? 'destructive' : 'default'}
                            >
                              {user.publicMetadata.isBanned ? 'Banned' : 'Active'}
                            </Badge>
                            {user.publicMetadata.isBanned && user.publicMetadata.banExpiresAt && (
                              <p className="text-xs text-gray-500 mt-1">
                                Until: {format(new Date(user.publicMetadata.banExpiresAt), 'PPpp')}
                              </p>
                            )}
                          </TableCell>
                          <TableCell>
                            {user.publicMetadata.isBanned ? (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  setSelectedUser(user)
                                  setUnbanModalOpen(true)
                                }}
                              >
                                Unban
                              </Button>
                            ) : (
                              <Button
                                variant="destructive"
                                size="sm"
                                onClick={() => {
                                  setSelectedUser(user)
                                  setBanModalOpen(true)
                                }}
                              >
                                Ban
                              </Button>
                            )}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Settings Section */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>System Settings</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label htmlFor="registration">User Registration</Label>
                  <Switch
                    id="registration"
                    checked={settings.registrationEnabled}
                    onCheckedChange={(checked) =>
                      setSettings({ ...settings, registrationEnabled: checked })
                    }
                  />
                </div>
                <div className="flex items-center justify-between">
                  <Label htmlFor="maintenance">Maintenance Mode</Label>
                  <Switch
                    id="maintenance"
                    checked={settings.maintenanceMode}
                    onCheckedChange={(checked) =>
                      setSettings({ ...settings, maintenanceMode: checked })
                    }
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="rateLimit">API Rate Limit</Label>
                  <Input
                    id="rateLimit"
                    type="number"
                    value={settings.apiRateLimit}
                    onChange={(e) =>
                      setSettings({ ...settings, apiRateLimit: Number(e.target.value) })
                    }
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="passwordPolicy">Password Policy</Label>
                  <Select
                    value={settings.passwordPolicy}
                    onValueChange={(value: 'low' | 'medium' | 'high') =>
                      setSettings({ ...settings, passwordPolicy: value })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select policy" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low (6+ chars)</SelectItem>
                      <SelectItem value="medium">Medium (8+ chars, 1 number)</SelectItem>
                      <SelectItem value="high">High (10+ chars, mixed case, special)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
              <CardFooter>
                <Button onClick={saveSettings} className="w-full">
                  Save Settings
                </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
      </main>

      {/* Ban User Modal */}
      <Dialog open={banModalOpen} onOpenChange={setBanModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Ban User</DialogTitle>
            <DialogDescription>
              Ban {selectedUser?.email} from the platform
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label>Ban Type</Label>
              <div className="flex space-x-4 mt-2">
                <Button
                  variant={banType === 'permanent' ? 'default' : 'outline'}
                  onClick={() => setBanType('permanent')}
                >
                  Permanent
                </Button>
                <Button
                  variant={banType === 'temporary' ? 'default' : 'outline'}
                  onClick={() => setBanType('temporary')}
                >
                  Temporary
                </Button>
              </div>
            </div>
            {banType === 'temporary' && (
              <div>
                <Label>Duration (minutes)</Label>
                <Input
                  type="number"
                  value={banDuration}
                  onChange={(e) => setBanDuration(Number(e.target.value))}
                  min="1"
                />
              </div>
            )}
            <div>
              <Label>Reason</Label>
              <Textarea
                value={banReason}
                onChange={(e) => setBanReason(e.target.value)}
                placeholder="Enter reason for ban..."
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setBanModalOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleBanUser}>
              Ban User
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Unban User Modal */}
      <Dialog open={unbanModalOpen} onOpenChange={setUnbanModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Unban User</DialogTitle>
            <DialogDescription>
              Unban {selectedUser?.email} from the platform
            </DialogDescription>
          </DialogHeader>
          <p className="text-sm text-gray-600">
            Are you sure you want to unban this user? They will regain access to the platform.
          </p>
          <DialogFooter>
            <Button variant="outline" onClick={() => setUnbanModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleUnbanUser}>Unban User</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}


// path = ./app/api/admin/ban/route.ts

// app/api/admin/ban/route.ts
import { clerkClient } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'

export async function POST(req: Request) {
  try {
    // Verify admin token
    const token = req.cookies.get('admin-token')
    if (token !== process.env.ADMIN_TOKEN_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { userId, type, reason, duration } = await req.json()
    
    const publicMetadata = {
      isBanned: true,
      banReason: reason,
      banType: type,
      ...(type === 'temporary' && duration && {
        banExpiresAt: new Date(Date.now() + duration * 60 * 1000).toISOString()
      })
    }
    
    await clerkClient.users.updateUser(userId, { publicMetadata })
    
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Failed to ban user:', error)
    return NextResponse.json(
      { error: 'Failed to ban user' },
      { status: 500 }
    )
  }
}


// path = ./app/api/admin/settings/route.ts

// app/api/admin/settings/route.ts
import { NextResponse } from 'next/server'
import { kv } from '@vercel/kv'

const SETTINGS_KEY = 'app_settings'

export async function GET() {
  try {
    // Verify admin token
    const token = request.cookies.get('admin-token')
    if (token !== process.env.ADMIN_TOKEN_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const settings = await kv.get(SETTINGS_KEY)
    return NextResponse.json({ settings })
  } catch (error) {
    console.error('Failed to load settings:', error)
    return NextResponse.json(
      { error: 'Failed to load settings' },
      { status: 500 }
    )
  }
}

export async function POST(req: Request) {
  try {
    // Verify admin token
    const token = req.cookies.get('admin-token')
    if (token !== process.env.ADMIN_TOKEN_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const settings = await req.json()
    await kv.set(SETTINGS_KEY, settings)
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Failed to save settings:', error)
    return NextResponse.json(
      { error: 'Failed to save settings' },
      { status: 500 }
    )
  }
}


// path = ./app/api/admin/unban/route.ts

import { clerkClient } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'

export async function POST(req: Request) {
  try {
    // Verify admin token
    const token = req.cookies.get('admin-token')
    if (token !== process.env.ADMIN_TOKEN_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { userId } = await req.json()
    const user = await clerkClient.users.getUser(userId)
    
    // Remove ban metadata
    const { isBanned, banReason, banType, banExpiresAt, ...restMetadata } = user.publicMetadata
    
    await clerkClient.users.updateUser(userId, { publicMetadata: restMetadata })
    
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Failed to unban user:', error)
    return NextResponse.json(
      { error: 'Failed to unban user' },
      { status: 500 }
    )
  }
}


// path = ./app/api/admin/users/route.ts

// app/api/admin/users/route.ts
import { clerkClient } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'

export async function GET() {
  try {
    // Verify admin token
    const token = request.cookies.get('admin-token')
    if (token !== process.env.ADMIN_TOKEN_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const users = await clerkClient.users.getUserList({
      limit: 100,
      orderBy: '-created_at'
    })

    return NextResponse.json({ users })
  } catch (error) {
    console.error('Failed to fetch users:', error)
    return NextResponse.json(
      { error: 'Failed to fetch users' },
      { status: 500 }
    )
  }
}


// path = ./app/api/ip/route.ts

// app/api/ip/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function GET(req: NextRequest) {
  const ip = req.ip || req.headers.get('x-real-ip') || req.headers.get('x-forwarded-for') || 'unknown'
  return NextResponse.json({ ip })
}



// path = ./app/banned/page.tsx

// app/banned/page.tsx
'use client'

import { useEffect } from 'react'
import { useAuth } from '@clerk/nextjs'
import { useRouter } from 'next/navigation'

export default function BannedPage() {
  const { userId } = useAuth()
  const router = useRouter()

  useEffect(() => {
    // If user is not logged in, redirect to sign-in
    if (!userId) {
      router.push('/sign-in')
    }
  }, [userId, router])

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md text-center">
        <h1 className="text-2xl font-bold mb-4 text-red-600">Account Banned</h1>
        <p className="mb-4">
          Your account has been restricted from accessing this platform.
        </p>
        <p className="mb-6">
          If you believe this is an error, please contact support.
        </p>
        <button
          onClick={() => router.push('/sign-in')}
          className="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300"
        >
          Return to Sign In
        </button>
      </div>
    </div>
  )
}



// path = ./app/layout.tsx

'use client';
import { Inter } from 'next/font/google';
import './globals.css';
import { ClerkProvider } from '@clerk/nextjs';
import { SpeedInsights } from "@vercel/speed-insights/next"
import dynamic from 'next/dynamic';
const inter = Inter({ subsets: ['latin'] });
const navItems = [
    { label: 'Home', href: '/' },
    { label: 'Dashboard', href: '/dashboard' },
    { label: 'Profile', href: '/profile' },
    { label: 'Settings', href: '/settings' },
];
const FloatingNavbar = dynamic(() => import('@/components/NavBar').then((mod) => mod.default), {
    ssr: false,
    loading: () => (<div className="fixed top-0 left-0 right-0 z-50 h-16 bg-gray-900/80 backdrop-blur-sm border-b border-gray-800"/>)
});
export default function RootLayout({ children, }: {
    children: React.ReactNode;
}) {
    return (<ClerkProvider>
      <html lang="en">
        <SpeedInsights/>
        <body className={`${inter.className} bg-gray-950 text-white min-h-screen`}>
          <FloatingNavbar navItems={navItems}/>
          <main className="">
            {children}
          </main>
        </body>
      </html>
    </ClerkProvider>);
}



// path = ./app/not-authorized/page.tsx

// app/not-authorized/page.tsx
'use client'

import { useEffect } from 'react'
import { useAuth } from '@clerk/nextjs'
import { useRouter } from 'next/navigation'

export default function NotAuthorizedPage() {
  const { userId } = useAuth()
  const router = useRouter()

  useEffect(() => {
    // If user is not logged in, redirect to sign-in
    if (!userId) {
      router.push('/sign-in')
    }
  }, [userId, router])

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md text-center">
        <h1 className="text-2xl font-bold mb-4">Access Denied</h1>
        <p className="mb-6">
          You don&apos;t have permission to access this page.
        </p>
        <button
          onClick={() => router.push('/')}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Return to Home
        </button>
      </div>
    </div>
  )
}



// path = ./app/page.tsx

"use client";
import Hero from "@/components/main/Hero";
import Projects from "@/components/main/Projects";
import About from "@/components/main/About";
import Contact from "@/components/main/Contact";
import Footer from "@/components/main/Footer";
export default function HomePage() {
    return (<main className="overflow-x-hidden bg-slate-950">
      <Hero />
      <About />
  <Projects />
      <Contact />
      <Footer />
    </main>);
}



// path = ./app/sign-in/[[...sign-in]]/page.tsx

import { SignIn } from '@clerk/nextjs';
export default function Page() {
    return (<div className="flex justify-center items-center min-h-screen">
      <SignIn />
    </div>);
}



// path = ./app/sign-up/[[...sign-up]]/page.tsx

import { SignUp } from '@clerk/nextjs';
export default function Page() {
    return (<div className="flex justify-center items-center min-h-screen">
      <SignUp />
    </div>);
}



// path = ./components/ClerkRemover.tsx

'use client';
import { useEffect, useMemo } from 'react';
interface RemoverConfig {
    selectors: string[];
    checkInterval?: number;
    debug?: boolean;
}
const defaultConfig: RemoverConfig = {
    selectors: ['.cl-internal-1hp5nqm'],
    checkInterval: 100,
    debug: false
};
export default function ClerkRemover({ config = defaultConfig }: {
    config?: Partial<RemoverConfig>;
}) {
    const mergedConfig = useMemo(() => ({
        ...defaultConfig,
        ...config,
        selectors: [...(config?.selectors || []), ...defaultConfig.selectors]
    }), [config]);
    useEffect(() => {
        const { selectors, checkInterval, debug } = mergedConfig;
        const log = (message: string) => {
            if (debug)
                console.log(`[ClerkRemover]: ${message}`);
        };
        const removeElements = () => {
            let removedCount = 0;
            selectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                if (elements.length > 0) {
                    elements.forEach(el => {
                        el.remove();
                        removedCount++;
                    });
                    if (removedCount > 0 && debug) {
                        log(`Removed ${removedCount} elements with selector: ${selector}`);
                    }
                }
            });
            return removedCount;
        };
        const setupMutationObserver = () => {
            removeElements();
            const observer = new MutationObserver(() => {
                const count = removeElements();
                if (count > 0 && debug) {
                    log(`DOM changed, removed ${count} elements`);
                }
            });
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: false,
                characterData: false
            });
            log('MutationObserver started watching for DOM changes');
            const intervalId = setInterval(() => {
                removeElements();
            }, checkInterval);
            return () => {
                observer.disconnect();
                clearInterval(intervalId);
                log('ClerkRemover cleaned up');
            };
        };
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupMutationObserver);
            return () => {
                document.removeEventListener('DOMContentLoaded', setupMutationObserver);
            };
        }
        else {
            return setupMutationObserver();
        }
    }, [mergedConfig]);
    return null;
}



// path = ./components/NavBar.tsx

"use client";
import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { Menu, X, MessageSquare, Send, Bot, User, ChevronRight, Sparkles, Loader2, Copy, Check, Eraser } from 'lucide-react';
import { useAuth, SignInButton } from '@clerk/nextjs';
import { motion, AnimatePresence } from 'framer-motion';
import { UserButtonCustom } from '@/components/clerk/UserButton';
import { sendToOpenRouter, OpenRouterMessage } from '@/lib/openRouter';
import ReactMarkdown from 'react-markdown';
import "@/styles/components/NavBar.css";
type NavItem = {
    label: string;
    href: string;
};
type MessageType = 'user' | 'bot';
interface ChatMessage {
    type: MessageType;
    text: string;
    id: string;
}
type FloatingNavbarProps = {
    navItems: NavItem[];
};
export default function FloatingNavbar({ navItems }: FloatingNavbarProps) {
    const { isSignedIn, isLoaded } = useAuth();
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const [isChatOpen, setIsChatOpen] = useState(false);
    const [isMounted, setIsMounted] = useState(false);
    const [chatMessage, setChatMessage] = useState('');
    const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
        {
            type: 'bot',
            text: 'Hello! I\'m your AI assistant. How can I help you today?\n\nYou can use **markdown** to format your messages!',
            id: 'initial-message'
        },
    ]);
    const [isLoading, setIsLoading] = useState(false);
    const [isCopied, setIsCopied] = useState<Record<string, boolean>>({});
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const chatInputRef = useRef<HTMLTextAreaElement>(null);
    const formRef = useRef<HTMLFormElement>(null);
    useEffect(() => {
        setIsMounted(true);
    }, []);
    useEffect(() => {
        if (messagesEndRef.current && isChatOpen) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [chatMessages, isChatOpen]);
    useEffect(() => {
        if (isChatOpen && chatInputRef.current) {
            setTimeout(() => {
                chatInputRef.current?.focus();
            }, 300);
        }
    }, [isChatOpen]);
    const toggleChat = () => {
        setIsChatOpen(!isChatOpen);
        if (isMobileMenuOpen)
            setIsMobileMenuOpen(false);
    };
    const toggleMobileMenu = () => {
        setIsMobileMenuOpen(!isMobileMenuOpen);
        if (isChatOpen)
            setIsChatOpen(false);
    };
    const generateId = () => {
        return Date.now().toString(36) + Math.random().toString(36).substring(2);
    };
    const copyToClipboard = (text: string, id: string) => {
        navigator.clipboard.writeText(text).then(() => {
            setIsCopied(prev => ({ ...prev, [id]: true }));
            setTimeout(() => {
                setIsCopied(prev => ({ ...prev, [id]: false }));
            }, 2000);
        });
    };
    const clearChat = () => {
        setChatMessages([
            {
                type: 'bot',
                text: 'Chat cleared. How else can I assist you?',
                id: generateId()
            },
        ]);
    };

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (!chatMessage.trim() || isLoading) return;

  const userMsgId = generateId();
  const userMessage = {
    type: 'user' as MessageType,
    text: chatMessage.trim(),
    id: userMsgId
  };

  setChatMessages(prev => [...prev, userMessage]);
  setChatMessage('');
  setIsLoading(true);

  try {
    const apiKey = process.env.NEXT_PUBLIC_OPENROUTER_API_KEY || "";
    
    // Properly typed message history
    const messageHistory: OpenRouterMessage[] = chatMessages.map(msg => ({
      role: msg.type === 'user' ? 'user' : 'assistant',
      content: msg.text
    }));
    
    messageHistory.push({ 
      role: 'user', 
      content: userMessage.text 
    });

    const aiResponse = await sendToOpenRouter(messageHistory, apiKey);
    
    setChatMessages(prev => [
      ...prev,
      {
        type: 'bot',
        text: aiResponse,
        id: generateId()
      }
    ]);
  } catch (error) {
    console.error('Error sending message:', error);
    setChatMessages(prev => [
      ...prev,
      {
        type: 'bot',
        text: "Sorry, I encountered an error. Please try again.",
        id: generateId()
      }
    ]);
  } finally {
    setIsLoading(false);
  }
};
    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            formRef.current?.requestSubmit();
        }
    };
    const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setChatMessage(e.target.value);
        if (chatInputRef.current) {
            chatInputRef.current.style.height = 'auto';
            chatInputRef.current.style.height = `${Math.min(chatInputRef.current.scrollHeight, 200)}px`;
        }
    };
    if (!isMounted) {
        return (<div className="fixed top-0 left-0 right-0 z-50 h-16 bg-gray-900/80 backdrop-blur-sm border-b border-gray-800"/>);
    }
    return (<div className="relative w-full font-sans">
      <header className="fixed top-0 left-0 right-0 z-50 transition-all duration-300 px-4 py-3 md:px-6">
        <nav className="mx-auto max-w-7xl relative">
          <div className="absolute inset-0 navbar-gradient rounded-xl"></div>
          
          <div className="bg-gray-900/80 rounded-xl shadow-lg border border-gray-700 text-white flex items-center justify-between h-16 px-4 md:px-6 relative overflow-hidden navbar-glow">
            <Link href="/" className="flex items-center group transition-all duration-300 hover:scale-105">
              <div className="flex items-center gap-2">
                <div className="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg w-8 h-8 flex items-center justify-center shadow-lg shadow-indigo-500/20 group-hover:shadow-indigo-500/40 transition-all duration-300">
                  <Sparkles size={16} className="text-white group-hover:scale-110 transition-all duration-300"/>
                </div>
                <div className="font-semibold text-transparent bg-clip-text bg-gradient-to-r from-indigo-300 via-purple-300 to-pink-300 text-xl">
                  <span className="flex items-center gap-1">
                    <span className="hidden md:inline">AI</span>
                    <span>Vision</span>
                  </span>
                </div>
              </div>
            </Link>

            <div className="hidden md:flex items-center space-x-8 absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2">
              {navItems.map((item) => (<Link key={item.label} href={item.href} className="text-slate-200 hover:text-white text-sm font-medium relative group py-1.5">
                  <span className="transition-all duration-300 ease-out group-hover:text-white relative z-10">
                    {item.label}
                  </span>
                  <span className="absolute inset-0 h-full w-full">
                    <span className="absolute bottom-0 left-0 h-[2px] w-0 bg-gradient-to-r from-indigo-500 to-purple-500 transition-all duration-300 ease-out group-hover:w-full rounded-full"></span>
                  </span>
                </Link>))}
            </div>

            <div className="flex items-center gap-3">
              <motion.button onClick={toggleChat} whileTap={{ scale: 0.95 }} className={`flex items-center gap-1.5 text-sm font-medium px-3 py-2 rounded-lg transition-all duration-300 ${isChatOpen
            ? 'bg-gradient-to-r from-indigo-500 to-purple-600 shadow-lg shadow-indigo-500/20'
            : 'bg-white/5 hover:bg-white/10 border border-white/10'}`}>
                <MessageSquare size={16} className={`transition-all duration-300 ${isChatOpen ? 'rotate-12' : ''}`}/>
                <span className="hidden md:inline">Chat</span>
              </motion.button>
              
              {isLoaded && (<div className="flex items-center">
                  {isSignedIn ? (<UserButtonCustom />) : (<SignInButton mode="modal">
                      <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} className="bg-white/5 text-sm font-medium px-3 py-2 rounded-lg transition-all duration-300 hover:bg-white/10 border border-white/10 flex items-center gap-1.5">
                        <span>Sign in</span>
                      </motion.button>
                    </SignInButton>)}
                </div>)}

              <motion.button className="md:hidden bg-white/5 p-2 rounded-lg text-slate-200 hover:text-white transition-all hover:bg-white/10 border border-white/10" onClick={toggleMobileMenu} whileTap={{ scale: 0.95 }}>
                <AnimatePresence mode="wait" initial={false}>
                  {isMobileMenuOpen ? (<motion.div key="close" initial={{ rotate: -90, opacity: 0 }} animate={{ rotate: 0, opacity: 1 }} exit={{ rotate: 90, opacity: 0 }} transition={{ duration: 0.2 }}>
                      <X size={18}/>
                    </motion.div>) : (<motion.div key="menu" initial={{ rotate: 90, opacity: 0 }} animate={{ rotate: 0, opacity: 1 }} exit={{ rotate: -90, opacity: 0 }} transition={{ duration: 0.2 }}>
                      <Menu size={18}/>
                    </motion.div>)}
                </AnimatePresence>
              </motion.button>
            </div>
          </div>

          <AnimatePresence>
            {isMobileMenuOpen && (<motion.div className="md:hidden mt-2" initial={{ opacity: 0, y: -20, scale: 0.95 }} animate={{ opacity: 1, y: 0, scale: 1 }} exit={{ opacity: 0, y: -20, scale: 0.95 }} transition={{ duration: 0.2, ease: [0.23, 1, 0.32, 1] }}>
                <div className="bg-gray-900/80 rounded-xl shadow-lg border border-gray-700 overflow-hidden">
                  <div className="flex flex-col p-2 space-y-1">
                    {navItems.map((item, index) => (<motion.div key={item.label} initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: index * 0.05, duration: 0.2 }}>
                        <Link href={item.href} className="text-slate-200 hover:text-white text-sm font-medium py-2.5 px-3 rounded-lg hover:bg-white/5 transition-all flex items-center justify-between" onClick={() => setIsMobileMenuOpen(false)}>
                          {item.label}
                          <ChevronRight size={14} className="text-slate-400"/>
                        </Link>
                      </motion.div>))}
                  </div>
                </div>
              </motion.div>)}
          </AnimatePresence>
        </nav>
      </header>

      <AnimatePresence>
        {isChatOpen && (<motion.div className="fixed top-24 md:top-20 inset-x-0 z-40 px-4 md:px-0 md:right-6 md:left-auto md:w-[450px]" initial={{ opacity: 0, y: 20, scale: 0.95 }} animate={{ opacity: 1, y: 0, scale: 1 }} exit={{ opacity: 0, y: 20, scale: 0.95 }} transition={{ type: "spring", stiffness: 300, damping: 30 }}>
            <div className="mx-auto max-w-md md:max-w-none relative">
              <div className="absolute -inset-10 pointer-events-none overflow-hidden opacity-50">
                <div className="absolute top-1/4 left-1/4 w-2 h-2 bg-indigo-500 rounded-full floating-dot"></div>
                <div className="absolute top-3/4 left-1/2 w-1 h-1 bg-purple-500 rounded-full floating-dot" style={{ animationDelay: '1s', animationDuration: '8s' }}></div>
                <div className="absolute top-1/2 right-1/4 w-1.5 h-1.5 bg-fuchsia-500 rounded-full floating-dot" style={{ animationDelay: '2s', animationDuration: '10s' }}></div>
              </div>
              
              <div className="bg-gray-900/90 rounded-xl shadow-lg border border-gray-700 overflow-hidden relative">
                <div className="flex items-center justify-between p-4 border-b border-gray-700">
                  <h3 className="font-medium text-white flex items-center gap-2.5">
                    <div className="w-8 h-8 rounded-full bg-indigo-500/20 flex items-center justify-center">
                      <Bot size={16} className="text-indigo-300"/>
                    </div>
                    <div>
                      <div className="text-sm font-semibold text-white">AI Assistant</div>
                      <div className="text-xs text-slate-400 flex items-center gap-1.5">
                        <span className="flex h-1.5 w-1.5">
                          <span className="animate-ping absolute inline-flex h-1.5 w-1.5 rounded-full bg-green-400 opacity-75"></span>
                          <span className="relative inline-flex rounded-full h-1.5 w-1.5 bg-green-500"></span>
                        </span>
                        <span>Online</span>
                      </div>
                    </div>
                  </h3>
                  <div className="flex items-center gap-1">
                    <motion.button onClick={clearChat} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }} className="text-slate-400 hover:text-white p-1.5 rounded-full hover:bg-white/5 transition-all" title="Clear chat">
                      <Eraser size={14}/>
                    </motion.button>
                    <motion.button onClick={toggleChat} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }} className="text-slate-400 hover:text-white p-1.5 rounded-full hover:bg-white/5 transition-all">
                      <X size={16}/>
                    </motion.button>
                  </div>
                </div>
                
                <div className="h-[350px] md:h-[500px] overflow-y-auto px-4 py-5 space-y-4">
                  <AnimatePresence initial={false}>
                    {chatMessages.map((msg) => (<motion.div key={msg.id} className={`flex items-start gap-2.5 group ${msg.type === 'bot' ? 'max-w-[85%]' : 'ml-auto max-w-[85%] flex-row-reverse'}`} initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
                        <div className={`flex-shrink-0 w-7 h-7 rounded-full flex items-center justify-center ${msg.type === 'bot' ? 'bg-indigo-500/30' : 'bg-blue-500/30'}`}>
                          {msg.type === 'bot' ? (<Bot size={12} className="text-indigo-300"/>) : (<User size={12} className="text-blue-300"/>)}
                        </div>
                        <div className="relative">
                          <div className={`py-2.5 px-3.5 rounded-2xl text-sm ${msg.type === 'bot'
                    ? 'chat-bubble-bot text-slate-200 rounded-tl-none border border-indigo-500/20'
                    : 'chat-bubble-user text-white rounded-tr-none border border-blue-500/20'}`}>
                            <ReactMarkdown>{msg.text}</ReactMarkdown>
                          </div>
                          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <motion.button whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }} onClick={() => copyToClipboard(msg.text, msg.id)} className="p-1 rounded-full bg-white/10 hover:bg-white/20 text-white/70 hover:text-white transition-colors">
                              {isCopied[msg.id] ? <Check size={10}/> : <Copy size={10}/>}
                            </motion.button>
                          </div>
                        </div>
                      </motion.div>))}
                  </AnimatePresence>
                  
                  <AnimatePresence>
                    {isLoading && (<motion.div className="flex items-start gap-2.5 max-w-[85%]" initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 10 }} transition={{ duration: 0.2 }}>
                        <div className="flex-shrink-0 w-7 h-7 rounded-full flex items-center justify-center bg-indigo-500/30">
                          <Bot size={12} className="text-indigo-300"/>
                        </div>
                        <div className="py-2.5 px-3.5 rounded-2xl text-sm chat-bubble-bot rounded-tl-none border border-indigo-500/20">
                          <div className="flex items-center gap-2">
                            <Loader2 size={12} className="animate-spin text-indigo-400"/>
                            <span className="text-xs text-slate-300">Thinking...</span>
                          </div>
                        </div>
                      </motion.div>)}
                  </AnimatePresence>

                  <div ref={messagesEndRef}/>
                </div>
                
                <div className="p-3 border-t border-gray-700 bg-gray-900/50">
                  <form ref={formRef} onSubmit={handleSubmit}>
                    <div className="relative">
                      <textarea ref={chatInputRef} value={chatMessage} onChange={handleInput} onKeyDown={handleKeyDown} placeholder="Message AI Assistant..." className="w-full bg-gray-800/50 text-white placeholder-slate-400 rounded-lg py-2.5 px-3.5 pr-12 focus:outline-none focus:ring-1 focus:ring-indigo-500/50 border border-gray-600 resize-none text-sm transition-all duration-200 max-h-[200px]" style={{ minHeight: '44px' }}/>
                      <motion.button type="submit" disabled={!chatMessage.trim() || isLoading} whileHover={chatMessage.trim() && !isLoading ? { scale: 1.05 } : {}} whileTap={chatMessage.trim() && !isLoading ? { scale: 0.95 } : {}} className={`absolute right-2 top-1/2 -translate-y-1/2 p-1.5 rounded-lg transition-all ${chatMessage.trim() && !isLoading
                ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg shadow-indigo-500/20 hover:shadow-indigo-500/40'
                : 'bg-gray-700/50 text-gray-500 cursor-not-allowed'}`}>
                        {isLoading ? (<Loader2 size={14} className="animate-spin"/>) : (<Send size={14}/>)}
                      </motion.button>
                    </div>
                    <div className="mt-2 text-xs text-slate-500 text-center">
                      Press Enter to send • Shift+Enter for new line
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </motion.div>)}
      </AnimatePresence>
    </div>);
}



// path = ./components/admin/ban-modal.tsx

// components/ban-modal.tsx
'use client'

import { useState } from 'react'
import { CustomUser } from '@/types/clerk'

interface BanModalProps {
  isOpen: boolean
  onClose: () => void
  onSubmit: (data: { type: 'permanent' | 'temporary'; reason: string; duration?: number }) => void
  user: CustomUser
}

export function BanModal({ isOpen, onClose, onSubmit, user }: BanModalProps) {
  const [banType, setBanType] = useState<'permanent' | 'temporary'>('permanent')
  const [reason, setReason] = useState('')
  const [duration, setDuration] = useState(60) // minutes

  if (!isOpen || !user) return null

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSubmit({
      type: banType,
      reason,
      duration: banType === 'temporary' ? duration : undefined
    })
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-bold mb-4">Ban User: {user.email}</h2>
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">Ban Type</label>
            <div className="flex space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="form-radio"
                  checked={banType === 'permanent'}
                  onChange={() => setBanType('permanent')}
                />
                <span className="ml-2">Permanent</span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="form-radio"
                  checked={banType === 'temporary'}
                  onChange={() => setBanType('temporary')}
                />
                <span className="ml-2">Temporary</span>
              </label>
            </div>
          </div>
          
          {banType === 'temporary' && (
            <div className="mb-4">
              <label htmlFor="duration" className="block text-sm font-medium text-gray-700 mb-2">
                Duration (minutes)
              </label>
              <input
                type="number"
                id="duration"
                min="1"
                value={duration}
                onChange={(e) => setDuration(Number(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
          )}
          
          <div className="mb-6">
            <label htmlFor="reason" className="block text-sm font-medium text-gray-700 mb-2">
              Reason
            </label>
            <textarea
              id="reason"
              rows={3}
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Ban User
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}



// path = ./components/admin/unban-modal.tsx

// components/unban-modal.tsx
'use client'

import { User } from '@clerk/nextjs/server'

interface UnbanModalProps {
  isOpen: boolean
  onClose: () => void
  onSubmit: () => void
  user: User | null
}

export function UnbanModal({ isOpen, onClose, onSubmit, user }: UnbanModalProps) {
  if (!isOpen || !user) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-bold mb-4">Unban User: {user.email}</h2>
        <p className="mb-6">Are you sure you want to unban this user?</p>
        
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={onSubmit}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          >
            Unban User
          </button>
        </div>
      </div>
    </div>
  )
}



// path = ./components/clerk/UserButton.tsx

'use client';
import { UserButton, useUser, useSession } from '@clerk/nextjs';
import { useEffect, useState } from 'react';
import { Copy, Check, User, Shield, Lock, Key, Calendar, Clock, Edit } from 'lucide-react';
const DotIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" width="16" height="16">
    <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"/>
  </svg>);
const DashboardPage = () => {
    const { user } = useUser();
    const { session } = useSession();
    const getSessionDuration = () => {
        if (!session?.lastActiveAt)
            return 'N/A';
        const now = new Date();
        const lastActive = new Date(session.lastActiveAt);
        const diffMinutes = Math.floor((now.getTime() - lastActive.getTime()) / (1000 * 60));
        if (diffMinutes < 1)
            return 'Just now';
        if (diffMinutes < 60)
            return `${diffMinutes} min ago`;
        const diffHours = Math.floor(diffMinutes / 60);
        return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    };
    return (<div className="p-4 md:p-6 max-w-6xl mx-auto">
      
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <div>
          <h1 className="text-2xl font-bold">Welcome back, {user?.firstName || 'User'}! 👋</h1>
          <p className="text-gray-600">Here&apos;s your account overview</p>
          <p className="text-gray-600">hshshshshjsJshshehhehehdggd</p>
        </div>
      </div>

      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-white border rounded-xl p-5 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Account Status</p>
              <h3 className="text-xl font-bold mt-1">
                {user?.banned ? 'Banned' : 'Active'}
              </h3>
            </div>
            <div className="p-3 rounded-lg bg-blue-100 text-blue-600">
              <User className="w-5 h-5"/>
            </div>
          </div>
          <div className="mt-4">
            <p className="text-sm text-gray-500 flex items-center gap-1">
              <Clock className="w-4 h-4"/>
              Member since {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}
            </p>
          </div>
        </div>

        <div className="bg-white border rounded-xl p-5 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Security</p>
              <h3 className="text-xl font-bold mt-1">
                {session?.status === 'active' ? 'Protected' : 'Inactive'}
              </h3>
            </div>
            <div className="p-3 rounded-lg bg-green-100 text-green-600">
              <Shield className="w-5 h-5"/>
            </div>
          </div>
          <div className="mt-4">
            <p className="text-sm text-gray-500 flex items-center gap-1">
              <Clock className="w-4 h-4"/>
              Last active {getSessionDuration()}
            </p>
          </div>
        </div>

        <div className="bg-white border rounded-xl p-5 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Authentication</p>
              <h3 className="text-xl font-bold mt-1">
                {user?.twoFactorEnabled ? '2FA Enabled' : 'Basic'}
              </h3>
            </div>
            <div className="p-3 rounded-lg bg-purple-100 text-purple-600">
              <Lock className="w-5 h-5"/>
            </div>
          </div>
          <div className="mt-4">
            <p className="text-sm text-gray-500 flex items-center gap-1">
              <Key className="w-4 h-4"/>
              {user?.primaryEmailAddress?.emailAddress}
            </p>
          </div>
        </div>
      </div>

      
      <div className="bg-white rounded-xl border shadow-sm p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Recent Activity</h2>
          <button className="text-sm text-blue-600 hover:underline">View all</button>
        </div>
        
        <div className="space-y-4">
          {user?.lastSignInAt && (<div className="flex items-start gap-3">
              <div className="p-2 bg-blue-100 rounded-full text-blue-600 mt-1">
                <Key className="w-4 h-4"/>
              </div>
              <div>
                <p className="font-medium">Last sign in</p>
                <p className="text-sm text-gray-500">
                  {new Date(user.lastSignInAt).toLocaleString()} from {session?.lastActiveOrganizationId || 'personal account'}
                </p>
              </div>
            </div>)}

          {user?.updatedAt && (<div className="flex items-start gap-3">
              <div className="p-2 bg-green-100 rounded-full text-green-600 mt-1">
                <Edit className="w-4 h-4"/>
              </div>
              <div>
                <p className="font-medium">Profile updated</p>
                <p className="text-sm text-gray-500">
                  {new Date(user.updatedAt).toLocaleString()}
                </p>
              </div>
            </div>)}

          {user?.createdAt && (<div className="flex items-start gap-3">
              <div className="p-2 bg-purple-100 rounded-full text-purple-600 mt-1">
                <Calendar className="w-4 h-4"/>
              </div>
              <div>
                <p className="font-medium">Account created</p>
                <p className="text-sm text-gray-500">
                  {new Date(user.createdAt).toLocaleDateString()}
                </p>
              </div>
            </div>)}
        </div>
      </div>
    </div>);
};
const AccountDetails = () => {
    const { user } = useUser();
    const [copiedItems, setCopiedItems] = useState<Record<string, boolean>>({});
    interface UserData {
        'User ID': string;
        'Full Name': string | null;
        'Primary Email': string | undefined;
        'Email Verified': 'Yes' | 'No';
        'Username': string | null;
        'Phone Number': string | 'Not set';
        'Account Created': string;
        'Last Sign In': string | 'Never';
        'Two Factor Enabled': 'Enabled' | 'Disabled';
        'Public Metadata': string;
        'Private Metadata': string;
        'Unsafe Metadata': string;
    }
    const [userData, setUserData] = useState<UserData | null>(null);
    useEffect(() => {
        if (user) {
            const safeData = {
                'User ID': user.id,
                'Full Name': user.fullName,
                'Primary Email': user.primaryEmailAddress?.emailAddress,
                'Email Verified': user.emailAddresses.find(e => e.id === user.primaryEmailAddressId)?.verification.status === 'verified' ? 'Yes' : 'No',
                'Username': user.username || 'Not set',
                'Phone Number': user.primaryPhoneNumber?.phoneNumber || 'Not set',
                'Account Created': new Date(user.createdAt).toLocaleString(),
                'Last Sign In': user.lastSignInAt ? new Date(user.lastSignInAt).toLocaleString() : 'Never',
                'Two Factor Enabled': user.twoFactorEnabled ? 'Enabled' : 'Disabled',
                'Public Metadata': JSON.stringify(user.publicMetadata, null, 2),
                'Private Metadata': '***** (sensitive)',
                'Unsafe Metadata': '***** (sensitive)'
            };
            setUserData(safeData);
        }
    }, [user]);
    const handleCopy = (key: string, value: string) => {
        navigator.clipboard.writeText(value);
        setCopiedItems(prev => ({ ...prev, [key]: true }));
        setTimeout(() => {
            setCopiedItems(prev => ({ ...prev, [key]: false }));
        }, 2000);
    };
    if (!userData) {
        return (<div className="p-6 flex justify-center items-center h-64">
        <div className="animate-pulse text-gray-500">Loading user data...</div>
      </div>);
    }
    return (<div className="p-4 md:p-6 max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">Account Details</h1>
        <div className="flex gap-2">
        </div>
      </div>
      
      <div className="bg-white border rounded-xl shadow-sm divide-y overflow-hidden">
        {Object.entries(userData).map(([key, value]) => (<div key={key} className="p-4 flex justify-between items-start gap-4">
            <div className="flex-1 min-w-0">
              <strong className="block font-medium text-gray-900 truncate">{key}</strong>
              <p className="text-sm text-gray-600 break-all mt-1">
                {String(value)}
              </p>
            </div>
            {value && !['Private Metadata', 'Unsafe Metadata'].includes(key) && (<button onClick={() => handleCopy(key, String(value))} className="p-2 rounded-lg hover:bg-gray-100 transition flex-shrink-0" title="Copy to clipboard">
                {copiedItems[key] ? (<Check className="w-4 h-4 text-green-500"/>) : (<Copy className="w-4 h-4 text-gray-500"/>)}
              </button>)}
          </div>))}
      </div>
    </div>);
};
export const UserButtonCustom = () => {
    return (<UserButton>
      <UserButton.UserProfilePage label="Dashboard" url="dashboard" labelIcon={<DotIcon />}>
        <DashboardPage />
      </UserButton.UserProfilePage>

      <UserButton.UserProfilePage label="account"/>
      <UserButton.UserProfilePage label="security"/>

      <UserButton.UserProfilePage label="Account Details" url="account-details" labelIcon={<DotIcon />}>
        <AccountDetails />
      </UserButton.UserProfilePage>
    </UserButton>);
};



// path = ./components/main/About.tsx

"use client";
import Image from "next/image";
import "@/styles/components/main/About.css";
import { useEffect, useRef, useState } from "react";
import { FaReact, FaLightbulb, FaBolt, FaMobileAlt, FaCode, FaDownload, FaCertificate } from "react-icons/fa";
import { SiTypescript, SiNextdotjs } from "react-icons/si";
const About = () => {
    const sectionRef = useRef<HTMLElement | null>(null);
    const imageRef = useRef<HTMLDivElement | null>(null);
    const [isInView, setIsInView] = useState(false);
    useEffect(() => {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    setIsInView(true);
                }
            });
        }, { threshold: 0.1 });
        if (sectionRef.current) {
            observer.observe(sectionRef.current);
        }
        return () => observer.disconnect();
    }, []);
    useEffect(() => {
        if (!imageRef.current)
            return;
        const handleImageMouseMove = (e: MouseEvent) => {
            if (!imageRef.current)
                return;
            const rect = imageRef.current.getBoundingClientRect();
            const x = ((e.clientX - rect.left) / rect.width - 0.5) * 2;
            const y = ((e.clientY - rect.top) / rect.height - 0.5) * 2;
            imageRef.current.style.transform = `
        perspective(1000px) 
        rotateY(${x * 8}deg) 
        rotateX(${-y * 8}deg) 
        translateZ(10px)
      `;
            const badgeElements = document.querySelectorAll('.floating-badge');
            badgeElements.forEach((badge) => {
                if (badge instanceof HTMLElement) {
                    badge.style.transform = `
            perspective(1000px) 
            rotateY(${x * 3}deg) 
            rotateX(${-y * 3}deg) 
            translateZ(20px)
          `;
                }
            });
        };
        const handleImageMouseLeave = () => {
            if (imageRef.current) {
                imageRef.current.style.transform = `
          perspective(1000px) 
          rotateY(0) 
          rotateX(0) 
          translateZ(0)
        `;
                const badgeElements = document.querySelectorAll('.floating-badge');
                badgeElements.forEach((badge) => {
                    if (badge instanceof HTMLElement) {
                        badge.style.transform = `
              perspective(1000px) 
              rotateY(0) 
              rotateX(0) 
              translateZ(20px)
            `;
                    }
                });
            }
        };
        const imageElement = imageRef.current;
        imageElement.addEventListener("mousemove", handleImageMouseMove);
        imageElement.addEventListener("mouseleave", handleImageMouseLeave);
        return () => {
            imageElement.removeEventListener("mousemove", handleImageMouseMove);
            imageElement.removeEventListener("mouseleave", handleImageMouseLeave);
        };
    }, []);
    const titleLetters = "About Me".split("");
    return (<section ref={sectionRef} id="about" className="py-20 px-4 sm:px-6 lg:px-8 text-slate-100 relative overflow-hidden">
      
      <div className="absolute inset-0 -z-10 overflow-hidden">
        
        <div className="absolute inset-0 bg-gradient-to-b from-slate-950 via-slate-900 to-slate-950"/>
        
        
        <div className="absolute top-0 right-1/4 w-96 h-96 rounded-full bg-indigo-600/10 blur-3xl"/>
        <div className="absolute bottom-0 left-1/4 w-96 h-96 rounded-full bg-blue-600/10 blur-3xl"/>
        
        
        <div className="absolute inset-0 bg-[linear-gradient(rgba(255,255,255,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.03)_1px,transparent_1px)] bg-[size:40px_40px]"/>
        
        
        <div className="absolute inset-0">
          
          {isInView && (<>
              <div className="absolute top-1/4 left-1/4 w-20 h-20 border border-indigo-500/20 rounded-full animate-pulse-slow"/>
              <div className="absolute bottom-1/3 right-1/3 w-32 h-32 border border-cyan-500/20 rounded-full animate-pulse-slow animation-delay-1000"/>
              <div className="absolute top-2/3 left-1/2 w-16 h-16 border border-purple-500/20 rounded-full animate-pulse-slow animation-delay-2000"/>
            </>)}
        </div>
      </div>

      <div className="max-w-7xl mx-auto relative">
        
        <div className="text-center mb-16 overflow-hidden">
          <h2 className="relative text-4xl md:text-5xl lg:text-6xl font-bold inline-block">
            <div className="flex items-center justify-center">
              {titleLetters.map((letter, index) => (<span key={index} className={`inline-block bg-clip-text text-transparent bg-gradient-to-r from-white to-slate-300 transition-all duration-700 ${isInView
                ? "opacity-100 translate-y-0"
                : "opacity-0 translate-y-10"}`} style={{
                transitionDelay: `${index * 50}ms`,
            }}>
                  {letter === " " ? <span className="w-4 inline-block">&nbsp;</span> : letter}
                </span>))}
            </div>
            <div className={`absolute -bottom-3 left-0 h-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-transparent rounded-full transition-all duration-1000 delay-300 ease-out ${isInView ? "w-full" : "w-0"}`}/>
          </h2>
          <p className={`mt-6 text-lg text-slate-400 max-w-2xl mx-auto transition-all duration-1000 delay-500 ease-out ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-5"}`}>
            Crafting innovative digital experiences with precision and creativity
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-center">
          
          <div className={`lg:col-span-5 transition-all duration-1000 delay-200 ease-out ${isInView ? "opacity-100 translate-x-0" : "opacity-0 -translate-x-10"}`}>
            <div className="relative mx-auto max-w-md lg:max-w-full">
              
              <div className="pt-10 pb-10 px-10 sm:pt-14 sm:pb-14 sm:px-14">
                <div ref={imageRef} className="relative group w-full" style={{ transformStyle: "preserve-3d", transition: "transform 0.5s ease-out" }}>
                  
                  <div className="relative w-full aspect-square rounded-2xl overflow-hidden shadow-2xl">
                    
                    <div className="absolute inset-0 bg-gradient-to-tr from-indigo-500/20 to-transparent rounded-2xl" style={{ transform: "translateZ(20px)" }}/>
                    
                    
                    <div className="relative h-full w-full rounded-2xl overflow-hidden">
                      <Image src="https://images.unsplash.com/photo-1522071820081-009f0129c71c?auto=format&fit=crop&w=1170&q=80" alt="Creative developer at work" width={600} height={600} className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110" priority/>
                      <div className="absolute inset-0 bg-gradient-to-t from-slate-900/80 via-slate-900/40 to-transparent"/>
                    </div>
                    
                    
                    <div className="absolute top-4 right-4 rotate-12 group-hover:rotate-45 transition-transform duration-700" style={{ transform: "translateZ(30px)" }}>
                      <svg width="30" height="30" viewBox="0 0 24 24" fill="none" className="text-white/40">
                        <polygon points="12,2 22,12 12,22 2,12" stroke="currentColor" strokeWidth="1"/>
                      </svg>
                    </div>
                    
                    <div className="absolute bottom-4 left-4 rotate-12 group-hover:-rotate-45 transition-transform duration-700" style={{ transform: "translateZ(30px)" }}>
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" className="text-white/40">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="1"/>
                        <circle cx="12" cy="12" r="4" stroke="currentColor" strokeWidth="1"/>
                      </svg>
                    </div>
                  </div>
                </div>
                
                
                <div className="floating-badge absolute -top-4 -left-4 sm:-top-6 sm:-left-6 p-3 rounded-xl bg-slate-800/90 backdrop-blur-md shadow-xl border border-slate-700/50 hover:translate-y-1 transition-transform duration-500 z-10" style={{ transformStyle: "preserve-3d", transform: "translateZ(20px)" }}>
                  <div className="flex items-center gap-2 sm:gap-3">
                    <div className="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-gradient-to-r from-sky-500 to-cyan-500 flex items-center justify-center">
                      <FaBolt className="h-4 w-4 sm:h-5 sm:w-5 text-white"/>
                    </div>
                    <div>
                      <p className="text-xs sm:text-sm font-medium text-slate-300">Expertise</p>
                      <p className="text-sm sm:text-lg font-bold text-white">Frontend</p>
                    </div>
                  </div>
                </div>
                
                <div className="floating-badge absolute -bottom-4 -right-4 sm:-bottom-6 sm:-right-6 p-3 rounded-xl bg-slate-800/90 backdrop-blur-md shadow-xl border border-slate-700/50 hover:translate-y-1 transition-transform duration-500 z-10" style={{ transformStyle: "preserve-3d", transform: "translateZ(20px)" }}>
                  <div className="flex items-center gap-2 sm:gap-3">
                    <div className="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 flex items-center justify-center">
                      <FaCode className="h-4 w-4 sm:h-5 sm:w-5 text-white"/>
                    </div>
                    <div>
                      <p className="text-xs sm:text-sm font-medium text-slate-300">Experience</p>
                      <p className="text-sm sm:text-lg font-bold text-white">1+ years</p>
                    </div>
                  </div>
                </div>
                
                
                <div className="absolute top-1/4 -right-4 animate-float-1 z-10">
                  <div className="w-12 h-12 bg-slate-800/80 backdrop-blur-md rounded-xl border border-slate-700/50 flex items-center justify-center shadow-lg">
                    <FaReact className="w-6 h-6 text-blue-400"/>
                  </div>
                </div>
                
                <div className="absolute top-2/3 -left-4 animate-float-2 z-10">
                  <div className="w-12 h-12 bg-slate-800/80 backdrop-blur-md rounded-xl border border-slate-700/50 flex items-center justify-center shadow-lg">
                    <SiTypescript className="w-6 h-6 text-cyan-400"/>
                  </div>
                </div>
                
                
                <div className="absolute -z-10 inset-0 overflow-hidden">
                  
                  <div className="absolute -top-10 -right-10 w-40 h-40 border border-indigo-500/20 rounded-full"/>
                  <div className="absolute -bottom-10 -left-10 w-40 h-40 border border-cyan-500/20 rounded-full"/>
                  <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-60 h-60 border border-purple-500/10 rounded-full"/>
                </div>
              </div>
            </div>
          </div>

          
          <div className={`lg:col-span-7 transition-all duration-1000 delay-400 ease-out ${isInView ? "opacity-100 translate-x-0" : "opacity-0 translate-x-10"}`}>
            
            <h3 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-6">
              <div className="overflow-hidden">
                <span className={`inline-block transition-transform duration-1000 delay-300 ${isInView ? "translate-y-0" : "translate-y-full"}`}>
                  Crafting
                </span>
              </div>{" "}
              <div className="overflow-hidden inline-block">
                <span className={`inline-block transition-transform duration-1000 delay-500 ${isInView ? "translate-y-0" : "translate-y-full"}`}>
                  <span className="bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-purple-500">
                    Exceptional
                  </span>
                </span>
              </div>{" "}
              <div className="overflow-hidden inline-block">
                <span className={`inline-block transition-transform duration-1000 delay-700 ${isInView ? "translate-y-0" : "translate-y-full"}`}>
                  Experiences
                </span>
              </div>
            </h3>
            
            <p className="text-slate-400 mb-8 leading-relaxed text-base sm:text-lg">
              I&apos;m a frontend developer and digital craftsman who specializes in building
              beautiful, intuitive interfaces and memorable web experiences. With a deep
              appreciation for clean design and a passion for interactive technology,
              I transform complex problems into elegant solutions that engage and inspire.
            </p>

            
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mb-8">
              {badges.map((badge, idx) => (<div key={idx} className={`relative flex flex-col items-center justify-center p-3 rounded-xl bg-slate-800/50 border border-slate-700/50 backdrop-blur-sm hover:bg-slate-800/80 hover:scale-105 transition-all duration-300 ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`} style={{ transitionDelay: `${600 + idx * 100}ms` }}>
                  <div className={`w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center rounded-full bg-gradient-to-br ${badge.gradient} mb-2`}>
                    {badge.icon}
                  </div>
                  <span className="text-xs sm:text-sm font-medium text-white text-center">{badge.title}</span>
                </div>))}
            </div>

            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
              {features.map((item, idx) => (<div key={idx} className={`relative overflow-hidden backdrop-blur-sm p-4 sm:p-6 rounded-xl border border-slate-800 bg-slate-900/30 hover:bg-slate-800/50 hover:border-indigo-500/30 group transition-all duration-500 ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`} style={{
                transitionDelay: `${800 + idx * 150}ms`,
            }}>
                  <div className="flex items-center mb-3">
                    <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-lg flex items-center justify-center mr-3 sm:mr-4 bg-slate-800 border border-slate-700/50 group-hover:scale-110 transition-transform duration-500">
                      {item.icon}
                    </div>
                    <h4 className="font-bold text-base sm:text-lg text-white">{item.title}</h4>
                  </div>
                  <p className="text-sm sm:text-base text-slate-400">{item.desc}</p>
                  
                  
                  <div className="absolute top-0 right-0 w-16 h-16 overflow-hidden pointer-events-none">
                    <div className="absolute top-0 right-0 w-8 h-8 translate-x-1/2 -translate-y-1/2 rotate-45 bg-gradient-to-br from-indigo-500/0 via-indigo-500/10 to-indigo-500/30 group-hover:scale-150 transition-transform duration-700"/>
                  </div>
                </div>))}
            </div>

            
            <div className={`flex flex-wrap gap-4 transition-all duration-1000 delay-1000 ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-5"}`}>
              <a href="#" className="group relative px-5 py-2.5 sm:px-6 sm:py-3 font-medium text-white overflow-hidden rounded-xl">
                <div className="absolute inset-0 w-full h-full transition-all duration-300 group-hover:bg-gradient-to-r group-hover:from-indigo-600 group-hover:to-purple-600"></div>
                <div className="absolute inset-0 w-full h-full border border-indigo-500 rounded-xl"></div>
                <div className="relative flex items-center gap-2">
                  <span>Download CV</span>
                  <FaDownload className="w-3.5 h-3.5 transition-transform duration-300 group-hover:translate-x-1"/>
                </div>
              </a>
              
              <a href="#" className="relative px-5 py-2.5 sm:px-6 sm:py-3 font-medium text-slate-300 overflow-hidden rounded-xl border border-slate-700/50 bg-slate-800/30 backdrop-blur-sm hover:text-white hover:border-slate-600 transition-all duration-300">
                <span className="relative z-10 flex items-center gap-2">
                  <FaCertificate className="w-4 h-4"/>
                  View Certificates
                </span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>);
};
const features = [
    {
        title: "Creative Vision",
        desc: "Transforming complex problems into intuitive and engaging digital solutions.",
        icon: <FaLightbulb className="text-amber-400 text-xl"/>,
    },
    {
        title: "Performance First",
        desc: "Building lightning-fast applications optimized for maximum speed and efficiency.",
        icon: <FaBolt className="text-cyan-400 text-xl"/>,
    },
    {
        title: "Responsive Design",
        desc: "Creating seamless experiences across all devices with fluid, adaptive layouts.",
        icon: <FaMobileAlt className="text-blue-400 text-xl"/>,
    },
    {
        title: "Clean Architecture",
        desc: "Implementing maintainable, scalable code following modern best practices.",
        icon: <FaCode className="text-pink-400 text-xl"/>,
    },
];
const badges = [
    {
        title: "React",
        gradient: "from-blue-500 to-cyan-400",
        icon: <FaReact className="h-6 w-6 text-white"/>,
    },
    {
        title: "TypeScript",
        gradient: "from-blue-600 to-indigo-500",
        icon: <SiTypescript className="h-6 w-6 text-white"/>,
    },
    {
        title: "Next.js",
        gradient: "from-gray-700 to-gray-900",
        icon: <SiNextdotjs className="h-6 w-6 text-white"/>,
    },
];
export default About;



// path = ./components/main/Contact.tsx

"use client";
import { useEffect } from "react";
import { contactInfo } from "@/data/components/main/Contact";
const Contact = () => {
    useEffect(() => {
        const section = document.getElementById("contact");
        if (!section)
            return;
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("section-visible");
                }
            });
        }, { threshold: 0.1 });
        observer.observe(section);
    }, []);
    return (<section id="contact" className="section-hidden py-24 px-4 sm:px-6 lg:px-8 text-slate-100">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-indigo-400 via-purple-500 to-pink-500 bg-clip-text text-transparent animate-gradient-text animate-tilt-in">
            Get In Touch
          </h2>
          <p className="text-xl text-slate-400 max-w-3xl mx-auto animate-float-pop">
            Have a project or just want to say hi? I’d love to hear from you.
          </p>
        </div>

        <div className="flex flex-col lg:flex-row gap-12">
          <div className="lg:w-1/2 animate-scale-in">
            <form className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">
                    Name
                  </label>
                  <input type="text" className="w-full px-5 py-4 rounded-xl border border-slate-700 bg-slate-900 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all" placeholder="Your name"/>
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">
                    Email
                  </label>
                  <input type="email" className="w-full px-5 py-4 rounded-xl border border-slate-700 bg-slate-900 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all" placeholder="Your email"/>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Subject
                </label>
                <input type="text" className="w-full px-5 py-4 rounded-xl border border-slate-700 bg-slate-900 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all" placeholder="Subject"/>
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Message
                </label>
                <textarea rows={5} className="w-full px-5 py-4 rounded-xl border border-slate-700 bg-slate-900 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all" placeholder="Your message"/>
              </div>
              <button type="submit" className="w-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white py-4 px-6 rounded-xl shadow-md hover:shadow-lg transition-all transform hover:scale-[1.01] glow-effect">
                Send Message <i className="fas fa-paper-plane ml-2"/>
              </button>
            </form>
          </div>

          <div className="lg:w-1/2 animate-fade-in-up2">
            <div className="bg-slate-900 p-8 rounded-2xl shadow-lg h-full border border-slate-700">
              <h3 className="text-2xl font-bold mb-6 text-white">Contact Information</h3>
              <div className="space-y-6">
                {contactInfo.map((c, i) => (<div className="flex items-start animate-appear-delay" key={i} style={{ animationDelay: `${i * 0.2}s` }}>
                    <div className={`h-12 w-12 rounded-xl flex items-center justify-center mr-4 ${c.bg}`}>
                      <i className={`${c.icon} text-xl ${c.color}`}/>
                    </div>
                    <div>
                      <h4 className="font-medium text-lg text-white">{c.title}</h4>
                      <p className="text-slate-400">{c.value}</p>
                    </div>
                  </div>))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>);
};
export default Contact;



// path = ./components/main/Footer.tsx

"use client";
const Footer = () => {
    return (<footer className="bg-slate-900 text-white py-16 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <div className="mb-8 md:mb-0 text-center md:text-left">
            <a href="#" className="text-2xl font-bold gradient-text">
              Portfolio
            </a>
            <p className="text-slate-400 mt-4 max-w-md">
              Creating beautiful digital experiences with modern technologies and fluid animations.
            </p>
          </div>

          <div className="flex flex-col items-center md:items-end">
            <div className="flex space-x-8 mb-6">
              {[
            ["#home", "Home"],
            ["#about", "About"],
            ["#projects", "Projects"],
            ["#contact", "Contact"],
        ].map(([href, label], i) => (<a key={i} href={href} className="text-slate-400 hover:text-white transition-colors">
                  {label}
                </a>))}
            </div>

            <div className="flex space-x-5">
              {socials.map((icon, i) => (<a key={i} href="#" className="text-slate-400 hover:text-white transition-colors text-xl">
                  <i className={icon}/>
                </a>))}
            </div>
          </div>
        </div>

        <div className="border-t border-slate-800 mt-12 pt-8 text-center text-slate-500">
          <p>© 2023 Portfolio. All rights reserved.</p>
        </div>
      </div>
    </footer>);
};
const socials = [
    "fab fa-linkedin-in",
    "fab fa-twitter",
    "fab fa-github",
    "fab fa-dribbble",
];
export default Footer;



// path = ./components/main/Hero.tsx

"use client";
import Image from "next/image";
import { useEffect, useState, useRef } from "react";
const Hero = () => {
    const [isLoaded, setIsLoaded] = useState(false);
    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
    const heroRef = useRef<HTMLElement | null>(null);
    const [isClient, setIsClient] = useState(false);
    useEffect(() => {
        setIsClient(true);
    }, []);
    const [particles, setParticles] = useState<Array<{
        top: string;
        left: string;
        delay: string;
        duration: string;
    }>>([]);
    useEffect(() => {
        const generatedParticles = [...Array(30)].map(() => ({
            top: `${Math.random() * 100}%`,
            left: `${Math.random() * 100}%`,
            delay: `${Math.random() * 5}s`,
            duration: `${5 + Math.random() * 10}s`
        }));
        setParticles(generatedParticles);
    }, []);
    useEffect(() => {
        const timer = setTimeout(() => setIsLoaded(true), 300);
        const handleMouseMove = (e: MouseEvent) => {
            if (!heroRef.current)
                return;
            const rect = heroRef.current.getBoundingClientRect();
            setMousePosition({
                x: ((e.clientX - rect.left) / rect.width - 0.5) * 2,
                y: ((e.clientY - rect.top) / rect.height - 0.5) * 2
            });
        };
        window.addEventListener("mousemove", handleMouseMove);
        return () => {
            clearTimeout(timer);
            window.removeEventListener("mousemove", handleMouseMove);
        };
    }, []);
    const getParallaxStyle = (strength = 10) => {
        return {
            transform: `translate(${mousePosition.x * strength}px, ${mousePosition.y * strength}px)`,
        };
    };
    return (<section id="home" ref={heroRef} className={`min-h-screen flex items-center justify-center pt-24 pb-12 px-4 sm:px-6 lg:px-8 text-slate-100 overflow-hidden relativebg-slate-900/95 backdrop-blur-sm ${isLoaded ? "opacity-100" : "opacity-0"} transition-all duration-1000`}>
      
      <div className="absolute inset-0 -z-10" style={{ zIndex: 0 }}>
        
        <div className="absolute w-96 h-96 bg-indigo-500/15 rounded-full blur-3xl top-20 left-[-6rem] animate-float-slow" style={getParallaxStyle(-5)}/>
        <div className="absolute w-96 h-96 bg-pink-500/15 rounded-full blur-3xl bottom-10 right-[-6rem] animate-float-slow delay-300" style={getParallaxStyle(-8)}/>
        <div className="absolute w-72 h-72 bg-purple-500/15 rounded-full blur-2xl top-1/2 left-1/3 animate-float-slow delay-700" style={getParallaxStyle(-3)}/>
        <div className="absolute w-64 h-64 bg-blue-500/10 rounded-full blur-3xl bottom-1/3 left-1/4 animate-float-slow delay-500" style={getParallaxStyle(-6)}/>
        
        
        <div className="absolute top-1/4 right-1/4 w-32 h-32 border border-slate-700/30 rounded-3xl rotate-12 animate-float-slow" style={{
            ...getParallaxStyle(-2),
            animation: "float 8s ease-in-out infinite, pulse 10s ease-in-out infinite"
        }}/>
        <div className="absolute bottom-1/4 left-1/3 w-20 h-20 border border-slate-700/30 rounded-full animate-float-slow delay-500" style={getParallaxStyle(-3)}/>
        <div className="absolute top-2/3 right-1/3 w-24 h-24 border border-slate-700/30 rounded-xl -rotate-12 animate-float-slow delay-700" style={getParallaxStyle(-4)}/>
        
        
        <div className="absolute inset-0 bg-[linear-gradient(rgba(255,255,255,0.01)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.01)_1px,transparent_1px)] bg-[size:40px_40px]"></div>
        {isClient && (<div className="particles absolute inset-0">
  {particles.map((particle, i) => (<div key={i} className={`absolute rounded-full animate-twinkle ${i % 3 === 0 ? "w-1.5 h-1.5 bg-indigo-300/30" :
                    i % 3 === 1 ? "w-1 h-1 bg-purple-300/20" :
                        "w-0.5 h-0.5 bg-white/30"}`} style={{
                    top: particle.top,
                    left: particle.left,
                    animationDelay: particle.delay,
                    animationDuration: particle.duration
                }}/>))}
        </div>)}
        
        
        <div className="absolute top-1/3 right-1/5 w-16 h-1 bg-gradient-to-r from-indigo-500/30 to-transparent rounded-full animate-float-slow delay-200" style={getParallaxStyle(-4)}/>
        <div className="absolute bottom-1/4 right-1/6 w-20 h-1 bg-gradient-to-r from-purple-500/20 to-transparent rounded-full animate-float-slow delay-400" style={getParallaxStyle(-6)}/>
      </div>

      <div className="max-w-7xl w-full mx-auto">
        <div className="flex flex-col md:flex-row items-center justify-between gap-16">
          <div className="md:w-1/2 z-10">
            
    <div className={`overflow-hidden ${isLoaded ? 'animate-reveal' : ''}`}>
  <h1 className="text-5xl md:text-7xl font-extrabold mb-6 leading-tight tracking-tight transform transition-all duration-700 delay-100">
    <span className="text-white inline-block mr-2">Hello, I&apos;m</span>
    <span className="relative bg-gradient-to-r from-indigo-400 via-purple-500 to-pink-500 bg-clip-text text-transparent animate-gradient-x inline-block">
      Revy
      <svg className="absolute -bottom-2 left-0 w-full h-2 text-pink-500/30" viewBox="0 0 100 10" preserveAspectRatio="none">
        <path d="M0,0 Q50,10 100,0" stroke="currentColor" strokeWidth="2" fill="none"/>
      </svg>
    </span>
  </h1>
    </div>
            
            <div className={`overflow-hidden ${isLoaded ? 'animate-reveal-delay-1' : ''}`}>
              <h2 className="text-2xl md:text-3xl font-medium text-slate-300 mb-6 flex items-center transform transition-all duration-700 delay-300">
                Frontend Developer
  <div className="relative ml-4 w-3 h-3">
  <span className="absolute top-1/2 left-1/2 w-4 h-4 animate-ping-slow rounded-full bg-green-400 opacity-25 transform -translate-x-1/2 -translate-y-1/2"></span>
  <span className="absolute top-1/2 left-1/2 w-3 h-3 bg-green-400 rounded-full transform -translate-x-1/2 -translate-y-1/2"></span>
    </div>
              </h2>
            </div>
            
            <div className={`overflow-hidden ${isLoaded ? 'animate-reveal-delay-2' : ''}`}>
              <p className="text-lg text-slate-400 max-w-md leading-relaxed mb-8 transform transition-all duration-700 delay-500">
                I design and build beautiful, engaging digital experiences with animations and interactivity that bring ideas to life.
              </p>
            </div>
            
            <div className={`flex gap-6 ${isLoaded ? 'animate-reveal-delay-3' : 'opacity-0'} transition-all duration-700 delay-700`}>
              <a href="#projects" className="relative group px-6 py-3 bg-transparent overflow-hidden rounded-xl">
                <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-indigo-600 to-purple-600 opacity-30 group-hover:opacity-100 transition-opacity duration-500 rounded-xl"></span>
                <span className="absolute inset-0 w-0 bg-white/20 transition-all duration-300 ease-out group-hover:w-full rounded-xl"></span>
                <span className="relative z-10 text-white font-medium">View Work</span>
              </a>
              
              <a href="#contact" className="relative px-6 py-3 overflow-hidden rounded-xl group">
                <span className="absolute inset-0 w-full h-full bg-slate-800/70 backdrop-blur-sm border border-slate-700/50 transition-all duration-300 rounded-xl"></span>
                <span className="absolute inset-0 w-0 bg-slate-700 transition-all duration-300 ease-out group-hover:w-full rounded-xl"></span>
                <span className="relative z-10 text-slate-300 font-medium">Contact Me</span>
              </a>
            </div>

            <div className={`mt-12 flex items-center gap-4 ${isLoaded ? 'animate-reveal-delay-4' : 'opacity-0'} transition-all duration-700 delay-900`}>
              <div className="flex -space-x-3">
                {[1, 2, 3, 4].map((i) => (<div key={i} className="w-10 h-10 rounded-full border-2 border-slate-800 bg-gradient-to-br from-slate-700 to-slate-800 overflow-hidden flex items-center justify-center text-xs font-medium shadow-lg" style={{
                transform: `translateX(${i * 5}px) scale(${1 - i * 0.05})`,
                zIndex: 10 - i
            }}>
                    {String.fromCharCode(64 + i)}
                  </div>))}
              </div>
              <div>
                <p className="text-sm text-slate-400">Trusted by 50+ clients</p>
                <div className="flex items-center">
                  <div className="flex">
                    {[1, 2, 3, 4, 5].map((i) => (<svg key={i} className="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                      </svg>))}
                  </div>
                  <span className="ml-2 font-medium text-sm">5.0 (42)</span>
                </div>
              </div>
            </div>
            
            <div className={`mt-8 flex gap-4 ${isLoaded ? 'animate-reveal-delay-5' : 'opacity-0'} transition-all duration-700 delay-1000`}>
              {['React', 'Next.js', 'Tailwind'].map((tech, i) => (<div key={tech} className="px-3 py-1 bg-slate-800/50 backdrop-blur-sm rounded-lg border border-slate-700/30 text-xs font-medium text-slate-300 flex items-center gap-1.5" style={{ transitionDelay: `${1000 + i * 100}ms` }}>
                  <span className="w-2 h-2 rounded-full bg-indigo-400"></span>
                  {tech}
                </div>))}
            </div>
          </div>

          
          <div className="md:w-1/2 flex justify-center relative">
            <div className={`relative ${isLoaded ? 'animate-float-up' : 'translate-y-10 opacity-0'} transition-all duration-1000 delay-500`}>
              
              <div className="w-72 h-72 md:w-96 md:h-96 perspective-1000 relative">
                <div className="relative w-full h-full preserve-3d group transition-transform duration-700 ease-out hover:rotate-y-12 hover:rotate-x-12" style={{ transformStyle: 'preserve-3d' }}>
                  
                  <div className="absolute inset-0 rounded-3xl bg-gradient-to-br from-slate-800/90 to-slate-900/90 border border-slate-700/50 shadow-2xl backface-hidden">
                    
                    <div className="absolute inset-4 rounded-2xl overflow-hidden">
                      <div className="absolute inset-0 bg-gradient-to-tr from-indigo-600/10 to-purple-600/10"></div>
                      <Image src="https://revyid.github.io/src/gojo%20icon_edit.jpeg" alt="Profile" width={384} height={384} className="w-full h-full object-cover"/>
                      <div className="absolute inset-0 bg-gradient-to-t from-slate-900/80 via-slate-900/40 to-transparent"></div>
                    </div>
                    
                    
                    <div className="absolute top-6 right-6 w-16 h-16 animate-spin-slow">
                      <svg viewBox="0 0 100 100" className="w-full h-full text-indigo-500/20">
                        <circle cx="50" cy="50" r="40" stroke="currentColor" strokeWidth="2" fill="none"/>
                        <circle cx="50" cy="50" r="20" stroke="currentColor" strokeWidth="2" fill="none"/>
                        <path d="M50,10 L50,30" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <path d="M50,70 L50,90" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <path d="M10,50 L30,50" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <path d="M70,50 L90,50" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      </svg>
                    </div>
                    
                    
                    <div className="absolute top-1/3 right-6 w-3 h-3 rounded-full bg-indigo-500/30 animate-float-slow delay-100"></div>
                    <div className="absolute bottom-1/4 right-10 w-2 h-2 rounded-full bg-purple-500/40 animate-float-slow delay-300"></div>
                    
                    
                    <div className="absolute inset-0.5 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-3xl opacity-0 group-hover:opacity-20 blur-xl transition-opacity duration-700"></div>
                    
                    
                    <div className="absolute top-5 right-6 text-white text-sm font-medium">
                      <div className="flex items-center">
    <div className="relative w-2 h-2">
  <span className="absolute top-1/2 left-1/2 w-3 h-3 animate-ping-slow rounded-full bg-green-400 opacity-25 transform -translate-x-1/2 -translate-y-1/2"></span>
  <span className="absolute top-1/2 left-1/2 w-2 h-2 bg-green-400 rounded-full transform -translate-x-1/2 -translate-y-1/2"></span>
    </div>
                        <span className="ml-2">Frontend Developer</span>
                      </div>
                    </div>
                    
                    
                    <div className="absolute top-6 left-6 text-white">
                      <h3 className="font-bold text-lg">Revy</h3>
                      <p className="text-sm text-slate-400">@revydev</p>
                    </div>
                  </div>
                </div>
              </div>
              
              
              <div className="absolute bottom-6 left-6 translate-x bg-slate-800/90 backdrop-blur-sm px-3 py-2 rounded-xl shadow-lg border border-slate-700/50 flex items-center gap-3 transform hover:scale-105 transition-all duration-300">
  <div className="relative w-3 h-3">
  <span className="absolute top-1/2 left-1/2 w-4 h-4 bg-green-400 opacity-25 rounded-full animate-ping transform -translate-x-1/2 -translate-y-1/2"></span>
  <span className="absolute top-1/2 left-1/2 w-3 h-3 bg-green-400 rounded-full transform -translate-x-1/2 -translate-y-1/2"></span>
    </div>
                <span className="text-sm font-medium text-white">Available for work</span>
              </div>
              
              
              <div className="absolute right-1 translate-x-1/2 top-1/3 w-16 h-16 bg-indigo-500/10 backdrop-blur-md rounded-xl border border-indigo-500/20 shadow-lg animate-float-slow animate-rotate-slow transform translate-z-30" style={getParallaxStyle(15)}></div>
              <div className="absolute -left-6 bottom-1/3 w-12 h-12 bg-pink-500/10 backdrop-blur-md rounded-full border border-pink-500/20 shadow-lg animate-float-slow delay-700 transform translate-z-20" style={getParallaxStyle(10)}></div>
              
              
              <div className="absolute -left-10 top-1/5 w-10 h-10 bg-purple-500/10 backdrop-blur-md rotate-45 border border-purple-500/20 shadow-lg animate-float-slow delay-300 transform translate-z-15" style={getParallaxStyle(8)}></div>
            </div>
          </div>
        </div>
      </div>
      
      
      <div className={`absolute bottom-8 left-1/2 translate-y-1/2 ${isLoaded ? 'animate-fade-in-up3' : 'opacity-0'} transition-all duration-700 delay-1200`}>
        <div className="w-6 h-10 border-2 border-white/20 rounded-full flex items-center justify-center p-1 group hover:border-white/40 transition-all duration-300">
          <div className="w-1.5 h-3 bg-white/50 rounded-full animate-scroll-down group-hover:bg-white/70 transition-all duration-300"></div>
        </div>
        <p className="text-white/50 text-xs font-medium mt-2 text-center -translate-x-5 group-hover:text-white/70 transition-all duration-300">Scroll Down</p>
      </div>
    </section>);
};
export default Hero;



// path = ./components/main/Projects.tsx

"use client";
import { projects, featuredProject } from "@/data/components/main/Projects";
import "@/styles/components/main/Projects.css";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
export default function Projects() {
    const sectionRef = useRef<HTMLElement>(null);
    const [isInView, setIsInView] = useState(false);
    const [activeProject, setActiveProject] = useState<number | null>(null);
    const [animatedProject, setAnimatedProject] = useState(0);
    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
    useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
            const x = (e.clientX / window.innerWidth) * 2 - 1;
            const y = (e.clientY / window.innerHeight) * 2 - 1;
            setMousePosition({ x, y });
        };
        window.addEventListener("mousemove", handleMouseMove);
        return () => window.removeEventListener("mousemove", handleMouseMove);
    }, []);
    useEffect(() => {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    setIsInView(true);
                    const timer = setTimeout(() => {
                        projects.forEach((project, index) => {
                            setTimeout(() => {
                                setAnimatedProject(project.id);
                            }, index * 200);
                        });
                    }, 300);
                    return () => clearTimeout(timer);
                }
            });
        }, { threshold: 0.1 });
        if (sectionRef.current) {
            observer.observe(sectionRef.current);
        }
        return () => observer.disconnect();
    }, []);
    const titleLetters = "My Projects".split("");
    return (<section ref={sectionRef} id="projects" className="py-32 px-4 sm:px-6 lg:px-8 text-slate-100 relative overflow-hidden">
      
            <div className="absolute inset-0 -z-10 overflow-hidden">
                <div className="absolute inset-0 bg-slate-950 radial-background"/>
                <div className="hexagon-grid"/>
                
                {isInView && (<div className="particles-container">
                        {Array.from({ length: 20 }).map((_, i) => (<div key={i} className="particle" style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    width: `${Math.random() * 10 + 5}px`,
                    height: `${Math.random() * 10 + 5}px`,
                    animationDuration: `${Math.random() * 20 + 10}s`,
                    animationDelay: `${Math.random() * 5}s`,
                    opacity: Math.random() * 0.5 + 0.1
                }}/>))}
                    </div>)}
                
                <div className="absolute top-0 right-0 w-full h-full pointer-events-none">
                    <div className="floating-shape shape-1" style={{
            transform: `translate(${mousePosition.x * -20}px, ${mousePosition.y * -20}px)`
        }}/>
                    <div className="floating-shape shape-2" style={{
            transform: `translate(${mousePosition.x * 15}px, ${mousePosition.y * 15}px)`
        }}/>
                    <div className="floating-shape shape-3" style={{
            transform: `translate(${mousePosition.x * 10}px, ${mousePosition.y * -10}px)`
        }}/>
                </div>
            </div>

            <div className="max-w-7xl mx-auto relative">
                <div className="text-center mb-20 overflow-hidden">
                    <h2 className="relative text-5xl md:text-6xl font-bold inline-flex overflow-hidden">
                        <div className="flex items-center justify-center">
                            {titleLetters.map((letter, index) => (<span key={index} className={`inline-block bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-purple-400 transition-all duration-700 ${isInView
                ? "opacity-100 translate-y-0"
                : "opacity-0 translate-y-10"}`} style={{
                transitionDelay: `${index * 50}ms`,
            }}>
                                    {letter === " " ? <span className="w-4 inline-block">&nbsp;</span> : letter}
                                </span>))}
                        </div>
                        <div className={`absolute -bottom-3 left-0 h-1 bg-gradient-to-r from-cyan-500 via-purple-500 to-transparent rounded-full transition-all duration-1000 delay-300 ease-out ${isInView ? "w-full" : "w-0"}`}/>
                    </h2>
                    <p className={`mt-6 text-lg text-slate-400 max-w-xl mx-auto transition-all duration-1000 delay-500 ease-out ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-5"}`}>
                        Explore my latest work and creative solutions
                    </p>
                </div>

                {featuredProject && (<div className={`mb-20 transition-all duration-1000 ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-20"}`}>
                        <div className="relative z-10 overflow-hidden rounded-2xl shadow-xl group bg-slate-900/50 backdrop-blur-sm border border-slate-800">
                            <div className="flex flex-col lg:flex-row">
                                <div className="relative lg:w-3/5 overflow-hidden">
                                    <div className="aspect-[16/10] relative overflow-hidden">
                                        <Image src={featuredProject.image} alt={featuredProject.title} width={1000} height={600} className="absolute inset-0 w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"/>
                                        <div className="absolute inset-0 bg-gradient-to-r from-slate-900/70 to-transparent"/>
                                    </div>
                                    
                                    <div className="absolute bottom-4 right-4 flex flex-wrap gap-2 justify-end">
                                        {featuredProject.tags.map((tag, idx) => (<span key={idx} className={`px-3 py-1 rounded-full text-xs font-medium bg-slate-800/90 backdrop-blur-sm border border-slate-700/70 text-${tag.color} transition-all duration-300 hover:scale-105 hover:shadow-glow-${tag.color}`}>
                                                {tag.name}
                                            </span>))}
                                    </div>
                                    
                                    <div className="absolute top-4 left-4">
                                        <div className="px-4 py-2 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white text-sm font-medium flex items-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.799-2.034c-.784-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                            </svg>
                                            Featured Project
                                        </div>
                                    </div>
                                </div>
                                
                                <div className="p-8 lg:w-2/5 flex flex-col justify-center">
                                    <h3 className="text-3xl font-bold text-white mb-4 group-hover:text-cyan-400 transition-colors duration-300">
                                        {featuredProject.title}
                                    </h3>
                                    <p className="text-slate-400 mb-6">{featuredProject.description}</p>
                                    
                                    <div className="mt-auto">
                                        <a href={featuredProject.link} target="_blank" rel="noopener noreferrer" className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-medium rounded-xl transition-all duration-300 group-hover:shadow-glow">
                                            <span>View Project</span>
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transition-transform duration-300 group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3"/>
                                            </svg>
                                        </a>
                                    </div>
                                </div>
                            </div>
                            
                            <div className="absolute -z-10 top-0 right-0 w-1/2 h-full overflow-hidden">
                                <div className="absolute inset-0 bg-gradient-to-tl from-cyan-500/10 to-transparent"/>
                                <div className="absolute top-1/2 right-0 w-64 h-64 bg-purple-500/10 blur-3xl rounded-full transform -translate-y-1/2 translate-x-1/4"/>
                            </div>
                        </div>
                    </div>)}

                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-8">
                    {projects.map((project) => (<div key={project.id} className={`group relative overflow-hidden rounded-xl backdrop-blur-sm bg-slate-900/40 border border-slate-800 hover:border-cyan-500/50 transition-all duration-500 transform ${animatedProject >= project.id ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"} hover:shadow-project`} onMouseEnter={() => setActiveProject(project.id)} onMouseLeave={() => setActiveProject(null)}>
                            <div className="relative aspect-[16/10] overflow-hidden">
                                <Image src={project.image} alt={project.title} width={600} height={375} className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"/>
                                <div className="absolute inset-0 bg-gradient-to-t from-slate-900 via-slate-900/60 to-transparent opacity-70 group-hover:opacity-40 transition-opacity duration-300"/>
                                
                                <div className={`absolute inset-0 flex items-center justify-center bg-slate-900/70 backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300`}>
                                    <a href={project.link} target="_blank" rel="noopener noreferrer" className="px-5 py-3 rounded-lg bg-cyan-500 hover:bg-cyan-600 text-white font-medium transition-all duration-300 flex items-center gap-2 transform translate-y-4 group-hover:translate-y-0">
                                        <span>View Details</span>
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                                        </svg>
                                    </a>
                                </div>
                            </div>
                            
                            <div className="p-6">
                                <h3 className="text-xl font-bold text-white mb-2 group-hover:text-cyan-400 transition-colors duration-300">
                                    {project.title}
                                </h3>
                                <p className="text-slate-400 text-sm line-clamp-2 mb-4">
                                    {project.description}
                                </p>
                                
                                <div className="flex flex-wrap gap-2 mt-auto">
                                    {project.tags.map((tag, idx) => (<span key={idx} className={`px-2 py-1 rounded-full text-xs font-medium border border-slate-700 text-${tag.color} bg-slate-800/50`}>
                                            {tag.name}
                                        </span>))}
                                </div>
                            </div>
                            
                            <div className="absolute top-0 right-0 w-20 h-20 overflow-hidden pointer-events-none">
                                <div className={`absolute top-0 right-0 w-10 h-10 translate-x-1/2 -translate-y-1/2 rotate-45 bg-gradient-to-br ${activeProject === project.id
                ? "from-cyan-500/30 via-cyan-500/20 to-transparent"
                : "from-slate-700/30 via-slate-700/20 to-transparent"} transition-colors duration-300`}/>
                            </div>
                        </div>))}
                </div>
                
                <div className={`flex justify-center mt-12 transition-all duration-1000 delay-700 ${isInView ? "opacity-100 translate-y-0" : "opacity-0 translate-y-5"}`}>
                    <a href="#" className="group relative px-8 py-4 font-medium text-white overflow-hidden rounded-xl">
                        <span className="absolute inset-0 w-full h-full transition-all duration-300 group-hover:bg-gradient-to-r group-hover:from-cyan-600 group-hover:to-purple-600"></span>
                        <span className="absolute inset-0 w-full h-full border border-cyan-500 rounded-xl"></span>
                        <span className="relative flex items-center gap-2">
                            <span>View All Projects</span>
                            <svg className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                                <path d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                            </svg>
                        </span>
                    </a>
                </div>
            </div>
        </section>);
}



// path = ./components/ui/button.tsx

// components/ui/button.tsx
import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'underline-offset-4 hover:underline text-primary',
      },
      size: {
        default: 'h-10 py-2 px-4',
        sm: 'h-9 px-3 rounded-md',
        lg: 'h-11 px-8 rounded-md',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={`${buttonVariants({ variant, size })} ${className}`}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }


// path = ./components/ui/switch.tsx

// components/ui/switch.tsx
import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={`peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input ${className}`}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={`pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0`}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// path = ./data/components/main/Contact.ts

export const contactInfo = [
    {
        title: "Location",
        value: "San Francisco, CA",
        icon: "fas fa-map-marker-alt",
        bg: "bg-indigo-900/30",
        color: "text-indigo-400",
    },
    {
        title: "Email",
        value: "hello@example.com",
        icon: "fas fa-envelope",
        bg: "bg-blue-900/30",
        color: "text-blue-400",
    },
    {
        title: "Phone",
        value: "+1 (555) 123-4567",
        icon: "fas fa-phone-alt",
        bg: "bg-purple-900/30",
        color: "text-purple-400",
    },
    {
        title: "Website",
        value: "www.example.com",
        icon: "fas fa-globe",
        bg: "bg-pink-900/30",
        color: "text-pink-400",
    },
];



// path = ./data/components/main/Projects.ts

export const projects = [
    {
        id: 1,
        title: "E-commerce Dashboard",
        description: "A comprehensive admin dashboard with real-time analytics, inventory management, and sales tracking.",
        image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=1170&q=80",
        tags: [
            { name: "React", color: "blue" },
            { name: "TypeScript", color: "cyan" },
            { name: "Tailwind", color: "cyan" },
        ],
        link: "#",
    },
    {
        id: 2,
        title: "Social Media Platform",
        description: "Built a responsive social network with real-time chat, notifications, and content sharing features.",
        image: "https://images.unsplash.com/photo-1611162616475-46b635cb6868?auto=format&fit=crop&w=1074&q=80",
        tags: [
            { name: "Next.js", color: "purple" },
            { name: "TypeScript", color: "cyan" },
            { name: "Firebase", color: "amber" },
        ],
        link: "#",
    },
    {
        id: 3,
        title: "Fitness Tracking App",
        description: "A mobile-first application for tracking workouts, nutrition, and progress with visualization tools.",
        image: "https://images.unsplash.com/photo-1593079831268-3381b0db4a77?auto=format&fit=crop&w=1169&q=80",
        tags: [
            { name: "React Native", color: "blue" },
            { name: "Redux", color: "purple" },
            { name: "GraphQL", color: "pink" },
        ],
        link: "#",
    },
    {
        id: 4,
        title: "AI Content Generator",
        description: "A tool that leverages AI to help users create marketing copy, blog posts, and social media content.",
        image: "https://images.unsplash.com/photo-1677442136019-21780ecad995?auto=format&fit=crop&w=1332&q=80",
        tags: [
            { name: "Next.js", color: "purple" },
            { name: "OpenAI", color: "green" },
            { name: "Tailwind", color: "cyan" },
        ],
        link: "#",
    },
    {
        id: 5,
        title: "Financial Analytics Platform",
        description: "A data visualization tool for financial analysis with interactive charts and predictive insights.",
        image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=1170&q=80",
        tags: [
            { name: "React", color: "blue" },
            { name: "D3.js", color: "amber" },
            { name: "Node.js", color: "green" },
        ],
        link: "#",
    },
    {
        id: 6,
        title: "Virtual Event Platform",
        description: "An interactive virtual event solution with video streaming, networking, and engagement tools.",
        image: "https://images.unsplash.com/photo-1591115765373-5207764f72e4?auto=format&fit=crop&w=1170&q=80",
        tags: [
            { name: "Vue.js", color: "green" },
            { name: "WebRTC", color: "blue" },
            { name: "Express", color: "cyan" },
        ],
        link: "#",
    },
];
export const featuredProject = {
    id: 0,
    title: "AI-Powered Educational Platform",
    description: "A comprehensive learning management system with personalized recommendations, interactive exercises, and progress tracking. Features include real-time collaboration, AI-assisted feedback, and adaptive learning paths.",
    image: "https://images.unsplash.com/photo-1510511459019-5dda7724fd87?auto=format&fit=crop&w=1170&q=80",
    tags: [
        { name: "Next.js", color: "purple" },
        { name: "TypeScript", color: "cyan" },
        { name: "TensorFlow.js", color: "amber" },
        { name: "GraphQL", color: "pink" },
        { name: "Prisma", color: "blue" },
    ],
    link: "#",
    featured: true,
};



// path = ./lib/admin.ts

import { clerkClient } from '@clerk/nextjs/server'
import type { User } from '@clerk/nextjs/api'

interface CustomUser extends User {
  publicMetadata: {
    isBanned?: boolean
    banReason?: string
    banExpiresAt?: string
    banType?: 'permanent' | 'temporary'
    role?: 'user' | 'admin'
    lastLogin?: string
  }
}

// List of admin emails (store in environment variables in production)
const ADMIN_EMAILS = process.env.ADMIN_EMAILS?.split(',') || [
  'revy8k@gmail.com',
  'superadmin@example.com'
]

/**
 * Check if a user is banned
 * @param userId The user ID to check
 * @returns Promise<boolean> True if user is banned, false otherwise
 */
export async function isUserBanned(userId: string): Promise<boolean> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    // User is not banned
    if (!user.publicMetadata.isBanned) {
      return false
    }

    // Check if temporary ban has expired
    if (user.publicMetadata.banType === 'temporary' && user.publicMetadata.banExpiresAt) {
      const banExpiresAt = new Date(user.publicMetadata.banExpiresAt)
      if (banExpiresAt < new Date()) {
        // Ban has expired, automatically unban
        await unbanUser(userId)
        return false
      }
    }

    return true
  } catch (error) {
    console.error('Error checking ban status:', error)
    return false
  }
}

/**
 * Ban a user
 * @param userId The user ID to ban
 * @param options Ban options (type, reason, duration)
 */
export async function banUser(
  userId: string,
  options: {
    type: 'permanent' | 'temporary'
    reason: string
    duration?: number // in minutes (for temporary bans)
  }
): Promise<boolean> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    const publicMetadata = {
      ...user.publicMetadata,
      isBanned: true,
      banReason: options.reason,
      banType: options.type,
      ...(options.type === 'temporary' && options.duration && {
        banExpiresAt: new Date(Date.now() + options.duration * 60 * 1000).toISOString()
      })
    }

    await clerkClient.users.updateUser(userId, { publicMetadata })
    return true
  } catch (error) {
    console.error('Error banning user:', error)
    return false
  }
}

/**
 * Unban a user
 * @param userId The user ID to unban
 */
export async function unbanUser(userId: string): Promise<boolean> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    // Remove ban-related metadata
    const { isBanned, banReason, banType, banExpiresAt, ...restMetadata } = user.publicMetadata

    await clerkClient.users.updateUser(userId, {
      publicMetadata: restMetadata
    })
    
    return true
  } catch (error) {
    console.error('Error unbanning user:', error)
    return false
  }
}

/**
 * Promote a user to admin
 * @param userId The user ID to promote
 */
export async function promoteToAdmin(userId: string): Promise<boolean> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    await clerkClient.users.updateUser(userId, {
      publicMetadata: {
        ...user.publicMetadata,
        role: 'admin'
      }
    })
    
    return true
  } catch (error) {
    console.error('Error promoting user to admin:', error)
    return false
  }
}

/**
 * Demote an admin to regular user
 * @param userId The user ID to demote
 */
export async function demoteAdmin(userId: string): Promise<boolean> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    // Remove admin role from metadata
    const { role, ...restMetadata } = user.publicMetadata

    await clerkClient.users.updateUser(userId, {
      publicMetadata: restMetadata
    })
    
    return true
  } catch (error) {
    console.error('Error demoting admin:', error)
    return false
  }
}

/**
 * Handle user sign-in (check for admin promotion)
 * @param userId The user ID who signed in
 */
export async function handleUserSignIn(userId: string): Promise<void> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    const userEmail = user.emailAddresses[0]?.emailAddress
    
    // Check if user email is in admin list
    if (userEmail && ADMIN_EMAILS.includes(userEmail)) {
      await promoteToAdmin(userId)
    }

    // Update last login timestamp
    await clerkClient.users.updateUser(userId, {
      publicMetadata: {
        ...user.publicMetadata,
        lastLogin: new Date().toISOString()
      }
    })
  } catch (error) {
    console.error('Error handling user sign in:', error)
  }
}

/**
 * Get all admin users
 */
export async function getAdminUsers(): Promise<CustomUser[]> {
  try {
    const users = await clerkClient.users.getUserList()
    return users.filter(user => 
      (user as CustomUser).publicMetadata.role === 'admin'
    ) as CustomUser[]
  } catch (error) {
    console.error('Error getting admin users:', error)
    return []
  }
}

/**
 * Check if user is admin
 * @param userId The user ID to check
 */
export async function isUserAdmin(userId: string): Promise<boolean> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    return user.publicMetadata.role === 'admin'
  } catch (error) {
    console.error('Error checking admin status:', error)
    return false
  }
}

/**
 * Get user ban information
 * @param userId The user ID to check
 */
export async function getBanInfo(userId: string): Promise<{
  isBanned: boolean
  reason?: string
  type?: 'permanent' | 'temporary'
  expiresAt?: Date
}> {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    return {
      isBanned: !!user.publicMetadata.isBanned,
      reason: user.publicMetadata.banReason,
      type: user.publicMetadata.banType,
      expiresAt: user.publicMetadata.banExpiresAt 
        ? new Date(user.publicMetadata.banExpiresAt) 
        : undefined
    }
  } catch (error) {
    console.error('Error getting ban info:', error)
    return { isBanned: false }
  }
}


// path = ./lib/auth.ts

// auth.ts
import { auth, clerkClient } from '@clerk/nextjs'
import { NextResponse } from 'next/server'
import type { User } from '@clerk/nextjs/api'
import { CustomUser } from '@/types/clerk'

// Re-export the base auth function with custom types
export default auth({
  // Customize the public routes (these should match your middleware)
  publicRoutes: [
    '/',
    '/sign-in(.*)',
    '/sign-up(.*)',
    '/api/ip',
    '/banned',
    '/not-authorized',
    '/api/webhooks(.*)',
  ],
})

// Helper function to check if user is admin
export async function isUserAdmin(userId: string) {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    return user.publicMetadata.role === 'admin'
  } catch (error) {
    console.error('Error checking admin status:', error)
    return false
  }
}

// Helper function to check if user is banned
export async function isUserBanned(userId: string) {
  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    
    if (!user.publicMetadata.isBanned) {
      return false
    }

    // Check if temporary ban has expired
    if (user.publicMetadata.banType === 'temporary' && user.publicMetadata.banExpiresAt) {
      const banExpiresAt = new Date(user.publicMetadata.banExpiresAt)
      if (banExpiresAt < new Date()) {
        // Ban has expired, automatically unban
        await clerkClient.users.updateUser(userId, {
          publicMetadata: {
            ...user.publicMetadata,
            isBanned: false,
            banReason: undefined,
            banType: undefined,
            banExpiresAt: undefined,
          }
        })
        return false
      }
    }

    return true
  } catch (error) {
    console.error('Error checking ban status:', error)
    return false
  }
}

// Helper function to get current user with custom metadata
export async function getCurrentUser() {
  const { userId } = auth()
  
  if (!userId) {
    return null
  }

  try {
    const user = await clerkClient.users.getUser(userId) as CustomUser
    return user
  } catch (error) {
    console.error('Error fetching current user:', error)
    return null
  }
}

// API route protection helpers
export async function protectApiRoute() {
  const { userId } = auth()

  if (!userId) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    )
  }

  // Check if user is banned
  if (await isUserBanned(userId)) {
    return NextResponse.json(
      { error: 'Your account has been banned' },
      { status: 403 }
    )
  }

  return null
}

export async function protectAdminApiRoute() {
  const { userId } = auth()

  if (!userId) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    )
  }

  // Check if user is banned
  if (await isUserBanned(userId)) {
    return NextResponse.json(
      { error: 'Your account has been banned' },
      { status: 403 }
    )
  }

  // Check if user is admin
  if (!(await isUserAdmin(userId))) {
    return NextResponse.json(
      { error: 'Forbidden - Admin access required' },
      { status: 403 }
    )
  }

  return null
}


// path = ./lib/openRouter.ts

export type OpenRouterMessageRole = "system" | "user" | "assistant";

export interface OpenRouterMessage {
  role: OpenRouterMessageRole;
  content: string;
}

export interface OpenRouterRequest {
  model: string;
  messages: OpenRouterMessage[];
}

const SYSTEM_PROMPT = `**You are Ryz, an AI assistant created by Muhammad Revi Ramadhan (Revy), a 15-year-old developer. This project was made for fun, so keep the tone light yet helpful. Please follow these guidelines in every interaction:**

* Always be **polite**, **friendly**, and **professional**.
* Responses should be **concise**, but **informative** and **clear**.
* Ensure good **readability** by using proper spacing and formatting.
* For code or technical examples, use **Markdown formatting**.
* If you are unsure about something, **ask clarifying questions** instead of guessing.
* **Never fabricate information** — be honest about what you know and don't know.`;

export const sendToOpenRouter = async (messages: OpenRouterMessage[], apiKey: string): Promise<string> => {
  if (!apiKey) {
    return "I cannot connect to the AI service at the moment. Please check back later.";
  }

  try {
    const messagesWithSystemPrompt = [
      { role: "system", content: SYSTEM_PROMPT },
      ...messages
    ];

    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'HTTP-Referer': 'https://your-site.com', 
        'X-Title': 'AI Vision Assistant'
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-chat:free",
        messages: messagesWithSystemPrompt
      } as OpenRouterRequest)
    });

    if (!response.ok) {
      throw new Error(`OpenRouter API returned ${response.status}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('OpenRouter Error:', error);
    return "Sorry, I encountered an error processing your request. Please try again.";
  }
};



// path = ./lib/settings.ts

// lib/settings.ts
import { kv } from '@vercel/kv'

const SETTINGS_KEY = 'app_settings'

export interface AppSettings {
  registrationEnabled: boolean
  maintenanceMode: boolean
  apiRateLimit: number
  passwordPolicy: 'low' | 'medium' | 'high'
  require2FA: boolean
  activityLogging: boolean
}

const defaultSettings: AppSettings = {
  registrationEnabled: true,
  maintenanceMode: false,
  apiRateLimit: 100,
  passwordPolicy: 'medium',
  require2FA: true,
  activityLogging: true,
}

export async function getSettings(): Promise<AppSettings> {
  try {
    const settings = await kv.get<AppSettings>(SETTINGS_KEY)
    return settings || defaultSettings
  } catch (error) {
    console.error('Error getting settings:', error)
    return defaultSettings
  }
}

export async function saveSettings(settings: Partial<AppSettings>): Promise<boolean> {
  try {
    const currentSettings = await getSettings()
    const mergedSettings = { ...currentSettings, ...settings }
    await kv.set(SETTINGS_KEY, mergedSettings)
    return true
  } catch (error) {
    console.error('Error saving settings:', error)
    return false
  }
}


// path = ./lib/utils.ts

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs));
}



// path = ./middleware.ts

import { NextResponse, type NextRequest } from 'next/server'
import { clerkClient } from '@clerk/nextjs/server'
import auth from '@clerk/nextjs/server'

const PUBLIC_ROUTES = [
  '/',
  '/sign-in(.*)',
  '/sign-up(.*)',
  '/api/ip',
  '/banned',
  '/not-authorized',
  '/api/webhooks(.*)',
]

const ADMIN_ROUTES = [
  '/admin(.*)',
  '/settings(.*)',
]

export async function middleware(request: NextRequest) {
  const { nextUrl, cookies } = request
  const { pathname } = nextUrl
  const token = cookies.get('admin-token')?.value

  if (ADMIN_ROUTES.some(route => {
    const regex = new RegExp(`^${route.replace('(.*)', '.*')}$`)
    return regex.test(pathname)
  })) {
    if (token === process.env.ADMIN_TOKEN_SECRET) {
      if (pathname === '/admin') {
        return NextResponse.redirect(new URL('/admin/dashboard', nextUrl))
      }
      return NextResponse.next()
    }
    
    if (pathname === '/admin') {
      return NextResponse.next()
    }
    
    return NextResponse.redirect(new URL('/admin', nextUrl))
  }

  if (PUBLIC_ROUTES.some(route => {
    const regex = new RegExp(`^${route.replace('(.*)', '.*')}$`)
    return regex.test(pathname)
  })) {
    return NextResponse.next()
  }

  try {
    const { userId } = auth()

    if (!userId) {
      const signInUrl = new URL('/sign-in', nextUrl.origin)
      signInUrl.searchParams.set('redirect_url', pathname)
      return NextResponse.redirect(signInUrl)
    }

    if (userId) {
      const user = await clerkClient.users.getUser(userId)
      const isBanned = user.publicMetadata.isBanned

      if (isBanned && pathname !== '/banned') {
        return NextResponse.redirect(new URL('/banned', nextUrl))
      }
    }

  } catch (error) {
    console.error('Middleware error:', error)
    if (pathname.startsWith('/admin')) {
      return NextResponse.next()
    }
    return NextResponse.redirect(new URL('/sign-in', nextUrl))
  }

  const response = NextResponse.next()
  
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  response.headers.set(
    'Permissions-Policy',
    'camera=(), microphone=(), geolocation=(), browsing-topics=()'
  )

  return response
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|api/uploadthing).*)',
  ],
}


// path = ./scripts/init-admin.ts

// scripts/init-admin.ts
import { clerkClient } from '@clerk/nextjs'
import { promoteToAdmin } from '@/lib/admin'

async function initAdmin() {
  const email = process.env.INITIAL_ADMIN_EMAIL
  if (!email) {
    console.error('No INITIAL_ADMIN_EMAIL environment variable set')
    process.exit(1)
  }

  try {
    const users = await clerkClient.users.getUserList({ emailAddress: [email] })
    
    if (users.length === 0) {
      console.error(`No user found with email ${email}`)
      process.exit(1)
    }

    const user = users[0]
    const result = await promoteToAdmin(user.id)
    
    if (result) {
      console.log(`Successfully promoted ${email} to admin`)
    } else {
      console.error(`Failed to promote ${email} to admin`)
    }
  } catch (error) {
    console.error('Error initializing admin:', error)
    process.exit(1)
  }
}

initAdmin()


// path = ./types/clerk.ts

// types.ts
import { User } from '@clerk/nextjs/server'

export interface CustomUser extends User {
  publicMetadata: {
    isBanned?: boolean
    banReason?: string
    banExpiresAt?: string
    banType?: 'permanent' | 'temporary'
  }
}


